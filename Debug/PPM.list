
PPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005420  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f4  080056f4  00020460  2**0
                  CONTENTS
  4 .ARM          00000008  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056fc  080056fc  00020460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000460  20000000  08005704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000460  08005b64  00020460  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08005b64  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9bd  00000000  00000000  00020490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200c  00000000  00000000  0002fe4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00031e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00032c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235ad  00000000  00000000  000338e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ab6  00000000  00000000  00056e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd9a2  00000000  00000000  0006794b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001452ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d98  00000000  00000000  00145340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000460 	.word	0x20000460
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055d8 	.word	0x080055d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000464 	.word	0x20000464
 800020c:	080055d8 	.word	0x080055d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 ff5c 	bl	8001474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f98a 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fb38 	bl	8000c34 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005c4:	f000 fa46 	bl	8000a54 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c8:	f000 fabc 	bl	8000b44 <MX_TIM2_Init>
  MX_ADC1_Init();
 80005cc:	f000 f9f0 	bl	80009b0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80005d0:	f000 fb06 	bl	8000be0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80005d4:	48a8      	ldr	r0, [pc, #672]	; (8000878 <main+0x2c4>)
 80005d6:	f002 fcf1 	bl	8002fbc <HAL_TIM_Base_Start>
  HAL_UART_Transmit(&huart3, msg, sizeof(msg), 100); //Msg Inicial
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e0:	49a6      	ldr	r1, [pc, #664]	; (800087c <main+0x2c8>)
 80005e2:	48a7      	ldr	r0, [pc, #668]	; (8000880 <main+0x2cc>)
 80005e4:	f003 fb2d 	bl	8003c42 <HAL_UART_Transmit>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_UART_Receive_IT(&huart3, &rx, sizeof(rx));
 80005e8:	2202      	movs	r2, #2
 80005ea:	49a6      	ldr	r1, [pc, #664]	; (8000884 <main+0x2d0>)
 80005ec:	48a4      	ldr	r0, [pc, #656]	; (8000880 <main+0x2cc>)
 80005ee:	f003 fbba 	bl	8003d66 <HAL_UART_Receive_IT>
		//estamos checando os dados na serial constantemente

		HAL_ADC_Start(&hadc1);
 80005f2:	48a5      	ldr	r0, [pc, #660]	; (8000888 <main+0x2d4>)
 80005f4:	f001 f818 	bl	8001628 <HAL_ADC_Start>
		valor_ad = HAL_ADC_GetValue(&hadc1);
 80005f8:	48a3      	ldr	r0, [pc, #652]	; (8000888 <main+0x2d4>)
 80005fa:	f001 f8e7 	bl	80017cc <HAL_ADC_GetValue>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4ba2      	ldr	r3, [pc, #648]	; (800088c <main+0x2d8>)
 8000604:	601a      	str	r2, [r3, #0]
		corrente = valor_ad/2;
 8000606:	4ba1      	ldr	r3, [pc, #644]	; (800088c <main+0x2d8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	0fda      	lsrs	r2, r3, #31
 800060c:	4413      	add	r3, r2
 800060e:	105b      	asrs	r3, r3, #1
 8000610:	ee07 3a90 	vmov	s15, r3
 8000614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000618:	4b9d      	ldr	r3, [pc, #628]	; (8000890 <main+0x2dc>)
 800061a:	edc3 7a00 	vstr	s15, [r3]
		//monitoramento da corrente

		sobrecorrente = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 800061e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000622:	489c      	ldr	r0, [pc, #624]	; (8000894 <main+0x2e0>)
 8000624:	f001 fe46 	bl	80022b4 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b9a      	ldr	r3, [pc, #616]	; (8000898 <main+0x2e4>)
 800062e:	601a      	str	r2, [r3, #0]
		bypass = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000630:	2110      	movs	r1, #16
 8000632:	489a      	ldr	r0, [pc, #616]	; (800089c <main+0x2e8>)
 8000634:	f001 fe3e 	bl	80022b4 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b98      	ldr	r3, [pc, #608]	; (80008a0 <main+0x2ec>)
 800063e:	601a      	str	r2, [r3, #0]
		//monitoramento dos estados do circuito



		if (corrente >= 1000)
 8000640:	4b93      	ldr	r3, [pc, #588]	; (8000890 <main+0x2dc>)
 8000642:	edd3 7a00 	vldr	s15, [r3]
 8000646:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80008a4 <main+0x2f0>
 800064a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800064e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000652:	db0a      	blt.n	800066a <main+0xb6>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065a:	488e      	ldr	r0, [pc, #568]	; (8000894 <main+0x2e0>)
 800065c:	f001 fe42 	bl	80022e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2110      	movs	r1, #16
 8000664:	488d      	ldr	r0, [pc, #564]	; (800089c <main+0x2e8>)
 8000666:	f001 fe3d 	bl	80022e4 <HAL_GPIO_WritePin>
		}
		//monitora o valor do AD(Sobrecorrente)



		if(corrente<80 && sobrecorrente==1)
 800066a:	4b89      	ldr	r3, [pc, #548]	; (8000890 <main+0x2dc>)
 800066c:	edd3 7a00 	vldr	s15, [r3]
 8000670:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80008a8 <main+0x2f4>
 8000674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800067c:	d525      	bpl.n	80006ca <main+0x116>
 800067e:	4b86      	ldr	r3, [pc, #536]	; (8000898 <main+0x2e4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d121      	bne.n	80006ca <main+0x116>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	4881      	ldr	r0, [pc, #516]	; (8000894 <main+0x2e0>)
 800068e:	f001 fe29 	bl	80022e4 <HAL_GPIO_WritePin>
			liga_des=0;
 8000692:	4b86      	ldr	r3, [pc, #536]	; (80008ac <main+0x2f8>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
			decremento_desce = 1500;
 8000698:	4b85      	ldr	r3, [pc, #532]	; (80008b0 <main+0x2fc>)
 800069a:	4a86      	ldr	r2, [pc, #536]	; (80008b4 <main+0x300>)
 800069c:	601a      	str	r2, [r3, #0]
			incremento_sobe = 0;
 800069e:	4b86      	ldr	r3, [pc, #536]	; (80008b8 <main+0x304>)
 80006a0:	f04f 0200 	mov.w	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
			angulo_subida = 0;
 80006a6:	4b85      	ldr	r3, [pc, #532]	; (80008bc <main+0x308>)
 80006a8:	f04f 0200 	mov.w	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
			angulo_descida = 0;
 80006ae:	4b84      	ldr	r3, [pc, #528]	; (80008c0 <main+0x30c>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
			controle =0;
 80006b6:	4b83      	ldr	r3, [pc, #524]	; (80008c4 <main+0x310>)
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 80006be:	4882      	ldr	r0, [pc, #520]	; (80008c8 <main+0x314>)
 80006c0:	f002 fd54 	bl	800316c <HAL_TIM_Base_Stop_IT>
			sobrecorrente = 0;
 80006c4:	4b74      	ldr	r3, [pc, #464]	; (8000898 <main+0x2e4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
		}
		//retorno a operação normal


		if(angulo_subida>0)// Para que o Disparo não ocorra em 0°
 80006ca:	4b7c      	ldr	r3, [pc, #496]	; (80008bc <main+0x308>)
 80006cc:	edd3 7a00 	vldr	s15, [r3]
 80006d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d8:	dd2c      	ble.n	8000734 <main+0x180>
		{
			counter = __HAL_TIM_GET_COUNTER(&htim1);
 80006da:	4b67      	ldr	r3, [pc, #412]	; (8000878 <main+0x2c4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b7a      	ldr	r3, [pc, #488]	; (80008cc <main+0x318>)
 80006e4:	601a      	str	r2, [r3, #0]
			if(counter>=angulo_subida && counter<=angulo_descida)
 80006e6:	4b79      	ldr	r3, [pc, #484]	; (80008cc <main+0x318>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f2:	4b72      	ldr	r3, [pc, #456]	; (80008bc <main+0x308>)
 80006f4:	edd3 7a00 	vldr	s15, [r3]
 80006f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000700:	db13      	blt.n	800072a <main+0x176>
 8000702:	4b72      	ldr	r3, [pc, #456]	; (80008cc <main+0x318>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	ee07 3a90 	vmov	s15, r3
 800070a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800070e:	4b6c      	ldr	r3, [pc, #432]	; (80008c0 <main+0x30c>)
 8000710:	edd3 7a00 	vldr	s15, [r3]
 8000714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071c:	d805      	bhi.n	800072a <main+0x176>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2102      	movs	r1, #2
 8000722:	485e      	ldr	r0, [pc, #376]	; (800089c <main+0x2e8>)
 8000724:	f001 fdde 	bl	80022e4 <HAL_GPIO_WritePin>
 8000728:	e004      	b.n	8000734 <main+0x180>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2102      	movs	r1, #2
 800072e:	485b      	ldr	r0, [pc, #364]	; (800089c <main+0x2e8>)
 8000730:	f001 fdd8 	bl	80022e4 <HAL_GPIO_WritePin>
			}
		}//Realização do Pulso

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) && bypass == 0)
 8000734:	2140      	movs	r1, #64	; 0x40
 8000736:	4859      	ldr	r0, [pc, #356]	; (800089c <main+0x2e8>)
 8000738:	f001 fdbc 	bl	80022b4 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d013      	beq.n	800076a <main+0x1b6>
 8000742:	4b57      	ldr	r3, [pc, #348]	; (80008a0 <main+0x2ec>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d10f      	bne.n	800076a <main+0x1b6>
		{
			HAL_Delay(250);
 800074a:	20fa      	movs	r0, #250	; 0xfa
 800074c:	f000 ff04 	bl	8001558 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 8000750:	2140      	movs	r1, #64	; 0x40
 8000752:	4852      	ldr	r0, [pc, #328]	; (800089c <main+0x2e8>)
 8000754:	f001 fdae 	bl	80022b4 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d005      	beq.n	800076a <main+0x1b6>
			{
				liga_des=1;
 800075e:	4b53      	ldr	r3, [pc, #332]	; (80008ac <main+0x2f8>)
 8000760:	2201      	movs	r2, #1
 8000762:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 8000764:	4858      	ldr	r0, [pc, #352]	; (80008c8 <main+0x314>)
 8000766:	f002 fc91 	bl	800308c <HAL_TIM_Base_Start_IT>
			}
		}
		//Configuração do Botão para LIGA(Rampa de Aceleração)

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) && bypass==1)
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	484b      	ldr	r0, [pc, #300]	; (800089c <main+0x2e8>)
 800076e:	f001 fda1 	bl	80022b4 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d018      	beq.n	80007aa <main+0x1f6>
 8000778:	4b49      	ldr	r3, [pc, #292]	; (80008a0 <main+0x2ec>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d114      	bne.n	80007aa <main+0x1f6>
		{
			HAL_Delay(250);
 8000780:	20fa      	movs	r0, #250	; 0xfa
 8000782:	f000 fee9 	bl	8001558 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	4844      	ldr	r0, [pc, #272]	; (800089c <main+0x2e8>)
 800078a:	f001 fd93 	bl	80022b4 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00a      	beq.n	80007aa <main+0x1f6>
			{
				liga_des=2;
 8000794:	4b45      	ldr	r3, [pc, #276]	; (80008ac <main+0x2f8>)
 8000796:	2202      	movs	r2, #2
 8000798:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 800079a:	484b      	ldr	r0, [pc, #300]	; (80008c8 <main+0x314>)
 800079c:	f002 fc76 	bl	800308c <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2110      	movs	r1, #16
 80007a4:	483d      	ldr	r0, [pc, #244]	; (800089c <main+0x2e8>)
 80007a6:	f001 fd9d 	bl	80022e4 <HAL_GPIO_WritePin>
			}
		}
		//Configuração do Botão para DESLIGA(Rampa de Desaceleração)

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 80007aa:	2101      	movs	r1, #1
 80007ac:	4848      	ldr	r0, [pc, #288]	; (80008d0 <main+0x31c>)
 80007ae:	f001 fd81 	bl	80022b4 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f43f af17 	beq.w	80005e8 <main+0x34>
		{
			HAL_Delay(250);
 80007ba:	20fa      	movs	r0, #250	; 0xfa
 80007bc:	f000 fecc 	bl	8001558 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 80007c0:	2101      	movs	r1, #1
 80007c2:	4843      	ldr	r0, [pc, #268]	; (80008d0 <main+0x31c>)
 80007c4:	f001 fd76 	bl	80022b4 <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d01f      	beq.n	800080e <main+0x25a>
			{
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80007ce:	2101      	movs	r1, #1
 80007d0:	4830      	ldr	r0, [pc, #192]	; (8000894 <main+0x2e0>)
 80007d2:	f001 fda0 	bl	8002316 <HAL_GPIO_TogglePin>
				liga_des=0;
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <main+0x2f8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
				decremento_desce = 1500;
 80007dc:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <main+0x2fc>)
 80007de:	4a35      	ldr	r2, [pc, #212]	; (80008b4 <main+0x300>)
 80007e0:	601a      	str	r2, [r3, #0]
				incremento_sobe = 0;
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <main+0x304>)
 80007e4:	f04f 0200 	mov.w	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
				angulo_subida = 0;
 80007ea:	4b34      	ldr	r3, [pc, #208]	; (80008bc <main+0x308>)
 80007ec:	f04f 0200 	mov.w	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
				angulo_descida = 0;
 80007f2:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <main+0x30c>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
				controle =0;
 80007fa:	4b32      	ldr	r3, [pc, #200]	; (80008c4 <main+0x310>)
 80007fc:	f04f 0200 	mov.w	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8000802:	4831      	ldr	r0, [pc, #196]	; (80008c8 <main+0x314>)
 8000804:	f002 fcb2 	bl	800316c <HAL_TIM_Base_Stop_IT>
				sobrecorrente = 0;
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <main+0x2e4>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
			}
			//Botão Toggle LIGA/DESLIGA da Rede

			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 800080e:	2102      	movs	r1, #2
 8000810:	482f      	ldr	r0, [pc, #188]	; (80008d0 <main+0x31c>)
 8000812:	f001 fd4f 	bl	80022b4 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	f43f aee5 	beq.w	80005e8 <main+0x34>
			{
				HAL_Delay(250);
 800081e:	20fa      	movs	r0, #250	; 0xfa
 8000820:	f000 fe9a 	bl	8001558 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 8000824:	2102      	movs	r1, #2
 8000826:	482a      	ldr	r0, [pc, #168]	; (80008d0 <main+0x31c>)
 8000828:	f001 fd44 	bl	80022b4 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	f43f aeda 	beq.w	80005e8 <main+0x34>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	4816      	ldr	r0, [pc, #88]	; (8000894 <main+0x2e0>)
 800083a:	f001 fd53 	bl	80022e4 <HAL_GPIO_WritePin>
					liga_des=0;
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <main+0x2f8>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
					decremento_desce = 1500;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <main+0x2fc>)
 8000846:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <main+0x300>)
 8000848:	601a      	str	r2, [r3, #0]
					incremento_sobe = 0;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <main+0x304>)
 800084c:	f04f 0200 	mov.w	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
					angulo_subida = 0;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <main+0x308>)
 8000854:	f04f 0200 	mov.w	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
					angulo_descida = 0;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <main+0x30c>)
 800085c:	f04f 0200 	mov.w	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
					controle =0;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <main+0x310>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 800086a:	4817      	ldr	r0, [pc, #92]	; (80008c8 <main+0x314>)
 800086c:	f002 fc7e 	bl	800316c <HAL_TIM_Base_Stop_IT>
					sobrecorrente = 0;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <main+0x2e4>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &rx, sizeof(rx));
 8000876:	e6b7      	b.n	80005e8 <main+0x34>
 8000878:	200004c4 	.word	0x200004c4
 800087c:	20000000 	.word	0x20000000
 8000880:	20000554 	.word	0x20000554
 8000884:	200005ac 	.word	0x200005ac
 8000888:	2000047c 	.word	0x2000047c
 800088c:	200005b8 	.word	0x200005b8
 8000890:	200005b4 	.word	0x200005b4
 8000894:	40020400 	.word	0x40020400
 8000898:	200005d8 	.word	0x200005d8
 800089c:	40020000 	.word	0x40020000
 80008a0:	200005d4 	.word	0x200005d4
 80008a4:	447a0000 	.word	0x447a0000
 80008a8:	42a00000 	.word	0x42a00000
 80008ac:	200005c8 	.word	0x200005c8
 80008b0:	200003e8 	.word	0x200003e8
 80008b4:	44bb8000 	.word	0x44bb8000
 80008b8:	200005a4 	.word	0x200005a4
 80008bc:	200005cc 	.word	0x200005cc
 80008c0:	200005d0 	.word	0x200005d0
 80008c4:	200005b0 	.word	0x200005b0
 80008c8:	2000050c 	.word	0x2000050c
 80008cc:	20000598 	.word	0x20000598
 80008d0:	40020800 	.word	0x40020800

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2234      	movs	r2, #52	; 0x34
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f004 fa02 	bl	8004cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <SystemClock_Config+0xd4>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a29      	ldr	r2, [pc, #164]	; (80009a8 <SystemClock_Config+0xd4>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <SystemClock_Config+0xd4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000914:	2300      	movs	r3, #0
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <SystemClock_Config+0xd8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000920:	4a22      	ldr	r2, [pc, #136]	; (80009ac <SystemClock_Config+0xd8>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <SystemClock_Config+0xd8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	2310      	movs	r3, #16
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000940:	2302      	movs	r3, #2
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000948:	2310      	movs	r3, #16
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800094c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000950:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000952:	2304      	movs	r3, #4
 8000954:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4618      	mov	r0, r3
 8000964:	f002 f83c 	bl	80029e0 <HAL_RCC_OscConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800096e:	f000 fb8b 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	230f      	movs	r3, #15
 8000974:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2302      	movs	r3, #2
 8000978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2102      	movs	r1, #2
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fcdc 	bl	800234c <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800099a:	f000 fb75 	bl	8001088 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000

080009b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009c4:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <MX_ADC1_Init+0x9c>)
 80009c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <MX_ADC1_Init+0xa0>)
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_ADC1_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_ADC1_Init+0x98>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_ADC1_Init+0x98>)
 8000a12:	f000 fdc5 	bl	80015a0 <HAL_ADC_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a1c:	f000 fb34 	bl	8001088 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_ADC1_Init+0x98>)
 8000a32:	f000 fed9 	bl	80017e8 <HAL_ADC_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a3c:	f000 fb24 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000047c 	.word	0x2000047c
 8000a4c:	40012000 	.word	0x40012000
 8000a50:	0f000001 	.word	0x0f000001

08000a54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a80:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000a82:	4a2f      	ldr	r2, [pc, #188]	; (8000b40 <MX_TIM1_Init+0xec>)
 8000a84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 387;
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000a88:	f240 1283 	movw	r2, #387	; 0x183
 8000a8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1799;
 8000a94:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000a96:	f240 7207 	movw	r2, #1799	; 0x707
 8000a9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aae:	4823      	ldr	r0, [pc, #140]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000ab0:	f002 fa34 	bl	8002f1c <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000aba:	f000 fae5 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ac4:	f107 0320 	add.w	r3, r7, #32
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481c      	ldr	r0, [pc, #112]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000acc:	f002 fcdf 	bl	800348e <HAL_TIM_ConfigClockSource>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8000ad6:	f000 fad7 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ada:	2108      	movs	r1, #8
 8000adc:	4817      	ldr	r0, [pc, #92]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000ade:	f002 fb74 	bl	80031ca <HAL_TIM_OnePulse_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ae8:	f000 face 	bl	8001088 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000aec:	2306      	movs	r3, #6
 8000aee:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000af0:	2370      	movs	r3, #112	; 0x70
 8000af2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000af8:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000b0a:	f002 fd87 	bl	800361c <HAL_TIM_SlaveConfigSynchro>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b14:	f000 fab8 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM1_Init+0xe8>)
 8000b26:	f002 ffaf 	bl	8003a88 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000b30:	f000 faaa 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200004c4 	.word	0x200004c4
 8000b40:	40010000 	.word	0x40010000

08000b44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4199;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b6a:	f241 0267 	movw	r2, #4199	; 0x1067
 8000b6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b78:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000b7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8a:	4814      	ldr	r0, [pc, #80]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b8c:	f002 f9c6 	bl	8002f1c <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b96:	f000 fa77 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000ba8:	f002 fc71 	bl	800348e <HAL_TIM_ConfigClockSource>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bb2:	f000 fa69 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000bc4:	f002 ff60 	bl	8003a88 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bce:	f000 fa5b 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000050c 	.word	0x2000050c

08000be0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART3_UART_Init+0x4c>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_USART3_UART_Init+0x50>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_USART3_UART_Init+0x4c>)
 8000bec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART3_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART3_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART3_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART3_UART_Init+0x4c>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART3_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART3_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART3_UART_Init+0x4c>)
 8000c18:	f002 ffc6 	bl	8003ba8 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c22:	f000 fa31 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000554 	.word	0x20000554
 8000c30:	40004800 	.word	0x40004800

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b4c      	ldr	r3, [pc, #304]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a4b      	ldr	r2, [pc, #300]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b45      	ldr	r3, [pc, #276]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a44      	ldr	r2, [pc, #272]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a3d      	ldr	r2, [pc, #244]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a36      	ldr	r2, [pc, #216]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2132      	movs	r1, #50	; 0x32
 8000cbe:	4831      	ldr	r0, [pc, #196]	; (8000d84 <MX_GPIO_Init+0x150>)
 8000cc0:	f001 fb10 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f240 1101 	movw	r1, #257	; 0x101
 8000cca:	482f      	ldr	r0, [pc, #188]	; (8000d88 <MX_GPIO_Init+0x154>)
 8000ccc:	f001 fb0a 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4829      	ldr	r0, [pc, #164]	; (8000d8c <MX_GPIO_Init+0x158>)
 8000ce8:	f001 f950 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cec:	2303      	movs	r3, #3
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4823      	ldr	r0, [pc, #140]	; (8000d8c <MX_GPIO_Init+0x158>)
 8000d00:	f001 f944 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8000d04:	2332      	movs	r3, #50	; 0x32
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481a      	ldr	r0, [pc, #104]	; (8000d84 <MX_GPIO_Init+0x150>)
 8000d1c:	f001 f936 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d20:	230c      	movs	r3, #12
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d30:	2307      	movs	r3, #7
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4812      	ldr	r0, [pc, #72]	; (8000d84 <MX_GPIO_Init+0x150>)
 8000d3c:	f001 f926 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d40:	23c0      	movs	r3, #192	; 0xc0
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MX_GPIO_Init+0x150>)
 8000d54:	f001 f91a 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8000d58:	f240 1301 	movw	r3, #257	; 0x101
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_GPIO_Init+0x154>)
 8000d72:	f001 f90b 	bl	8001f8c <HAL_GPIO_Init>

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40020800 	.word	0x40020800

08000d90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
    if(corrente<corrente_partida)
 8000d98:	4b6d      	ldr	r3, [pc, #436]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da4:	4b6b      	ldr	r3, [pc, #428]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000da6:	edd3 7a00 	vldr	s15, [r3]
 8000daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db2:	dd1b      	ble.n	8000dec <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		base_tempo_aceleracao = (1500/(tempo_aceleracao))/8;
 8000db4:	4b68      	ldr	r3, [pc, #416]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000dbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	da00      	bge.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0x36>
 8000dc4:	3307      	adds	r3, #7
 8000dc6:	10db      	asrs	r3, r3, #3
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd0:	4b62      	ldr	r3, [pc, #392]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000dd2:	edc3 7a00 	vstr	s15, [r3]
		controle+= 0.125;
 8000dd6:	4b62      	ldr	r3, [pc, #392]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000de0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000de4:	4b5e      	ldr	r3, [pc, #376]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000de6:	edc3 7a00 	vstr	s15, [r3]
 8000dea:	e003      	b.n	8000df4 <HAL_TIM_PeriodElapsedCallback+0x64>
	}
	else
	{
		base_tempo_aceleracao = 0;
 8000dec:	4b5b      	ldr	r3, [pc, #364]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000dee:	f04f 0200 	mov.w	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
	}
    //Lógica para dar o pulso sem ultrapassar a corrente de partida
	base_tempo_desaceleracao = (1500/tempo_desaceleracao)/8;
 8000df4:	4b5b      	ldr	r3, [pc, #364]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000dfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	da00      	bge.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x76>
 8000e04:	3307      	adds	r3, #7
 8000e06:	10db      	asrs	r3, r3, #3
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e10:	4b55      	ldr	r3, [pc, #340]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000e12:	edc3 7a00 	vstr	s15, [r3]

	if(liga_des==1)
 8000e16:	4b55      	ldr	r3, [pc, #340]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d14f      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0x12e>
	{
		if(decremento_desce!=base_tempo_aceleracao)
 8000e1e:	4b54      	ldr	r3, [pc, #336]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e20:	ed93 7a00 	vldr	s14, [r3]
 8000e24:	4b4d      	ldr	r3, [pc, #308]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e26:	edd3 7a00 	vldr	s15, [r3]
 8000e2a:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e32:	d044      	beq.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0x12e>
		{
			decremento_desce = (decremento_desce - base_tempo_aceleracao);
 8000e34:	4b4e      	ldr	r3, [pc, #312]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e36:	ed93 7a00 	vldr	s14, [r3]
 8000e3a:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e3c:	edd3 7a00 	vldr	s15, [r3]
 8000e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e44:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e46:	edc3 7a00 	vstr	s15, [r3]
			decremento_sobe = (decremento_desce - 80);
 8000e4a:	4b49      	ldr	r3, [pc, #292]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e4c:	edd3 7a00 	vldr	s15, [r3]
 8000e50:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000f74 <HAL_TIM_PeriodElapsedCallback+0x1e4>
 8000e54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e58:	4b47      	ldr	r3, [pc, #284]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000e5a:	edc3 7a00 	vstr	s15, [r3]
			angulo_subida=decremento_sobe;
 8000e5e:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a46      	ldr	r2, [pc, #280]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000e64:	6013      	str	r3, [r2, #0]
			angulo_descida=decremento_desce;
 8000e66:	4b42      	ldr	r3, [pc, #264]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a45      	ldr	r2, [pc, #276]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000e6c:	6013      	str	r3, [r2, #0]
			if(angulo_subida<=200)
 8000e6e:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000e70:	edd3 7a00 	vldr	s15, [r3]
 8000e74:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000f84 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 8000e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	d804      	bhi.n	8000e8c <HAL_TIM_PeriodElapsedCallback+0xfc>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2110      	movs	r1, #16
 8000e86:	4840      	ldr	r0, [pc, #256]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000e88:	f001 fa2c 	bl	80022e4 <HAL_GPIO_WritePin>
			}
			//Ativando Relé de Bypass
			if(controle==tempo_aceleracao)
 8000e8c:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	ee07 3a90 	vmov	s15, r3
 8000e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e98:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea6:	d10a      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0x12e>
			{
				HAL_TIM_Base_Stop_IT(&htim2);
 8000ea8:	4838      	ldr	r0, [pc, #224]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000eaa:	f002 f95f 	bl	800316c <HAL_TIM_Base_Stop_IT>
				controle=0;
 8000eae:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
				incremento_sobe = 0;
 8000eb6:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
			}
			//Parando de Mover o Pulso
		}
	}

	if(liga_des==2)
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d13f      	bne.n	8000f46 <HAL_TIM_PeriodElapsedCallback+0x1b6>
	{
		if(incremento_sobe<=1500)
 8000ec6:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000ec8:	edd3 7a00 	vldr	s15, [r3]
 8000ecc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000f94 <HAL_TIM_PeriodElapsedCallback+0x204>
 8000ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed8:	d900      	bls.n	8000edc <HAL_TIM_PeriodElapsedCallback+0x14c>
				decremento_desce = 1500;
			}
			//Parando de Mover o Pulso
		}
	}
}
 8000eda:	e034      	b.n	8000f46 <HAL_TIM_PeriodElapsedCallback+0x1b6>
			incremento_sobe = incremento_sobe + base_tempo_desaceleracao;
 8000edc:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000ede:	ed93 7a00 	vldr	s14, [r3]
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000eee:	edc3 7a00 	vstr	s15, [r3]
			incremento_desce = incremento_sobe + 80;
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000ef4:	edd3 7a00 	vldr	s15, [r3]
 8000ef8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000f74 <HAL_TIM_PeriodElapsedCallback+0x1e4>
 8000efc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000f02:	edc3 7a00 	vstr	s15, [r3]
			angulo_subida=incremento_sobe;
 8000f06:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000f0c:	6013      	str	r3, [r2, #0]
			angulo_descida=incremento_desce;
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000f14:	6013      	str	r3, [r2, #0]
			if(controle==tempo_desaceleracao)
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f30:	d109      	bne.n	8000f46 <HAL_TIM_PeriodElapsedCallback+0x1b6>
				HAL_TIM_Base_Stop_IT(&htim2);
 8000f32:	4816      	ldr	r0, [pc, #88]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000f34:	f002 f91a 	bl	800316c <HAL_TIM_Base_Stop_IT>
				controle=0;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
				decremento_desce = 1500;
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000f42:	4a16      	ldr	r2, [pc, #88]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200003ec 	.word	0x200003ec
 8000f54:	200005b4 	.word	0x200005b4
 8000f58:	2000059c 	.word	0x2000059c
 8000f5c:	200005c0 	.word	0x200005c0
 8000f60:	200005b0 	.word	0x200005b0
 8000f64:	200005a0 	.word	0x200005a0
 8000f68:	200005c4 	.word	0x200005c4
 8000f6c:	200005c8 	.word	0x200005c8
 8000f70:	200003e8 	.word	0x200003e8
 8000f74:	42a00000 	.word	0x42a00000
 8000f78:	200005bc 	.word	0x200005bc
 8000f7c:	200005cc 	.word	0x200005cc
 8000f80:	200005d0 	.word	0x200005d0
 8000f84:	43480000 	.word	0x43480000
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	2000050c 	.word	0x2000050c
 8000f90:	200005a4 	.word	0x200005a4
 8000f94:	44bb8000 	.word	0x44bb8000
 8000f98:	200005a8 	.word	0x200005a8
 8000f9c:	44bb8000 	.word	0x44bb8000

08000fa0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

		tempo_aceleracao= (rx[0]);
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <HAL_UART_RxCpltCallback+0xc4>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <HAL_UART_RxCpltCallback+0xc8>)
 8000fb0:	601a      	str	r2, [r3, #0]
		tempo_desaceleracao= (rx[1]);
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <HAL_UART_RxCpltCallback+0xc4>)
 8000fb4:	785b      	ldrb	r3, [r3, #1]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b2c      	ldr	r3, [pc, #176]	; (800106c <HAL_UART_RxCpltCallback+0xcc>)
 8000fba:	601a      	str	r2, [r3, #0]
		if(rx[0]!=0){
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <HAL_UART_RxCpltCallback+0xc4>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d043      	beq.n	800104c <HAL_UART_RxCpltCallback+0xac>
		liga_des = 1;
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <HAL_UART_RxCpltCallback+0xd0>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]
		if ((tempo_aceleracao>=5 && tempo_aceleracao<=50)&& (tempo_desaceleracao>=5 && tempo_desaceleracao<=50))
 8000fca:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_UART_RxCpltCallback+0xc8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	dd2a      	ble.n	8001028 <HAL_UART_RxCpltCallback+0x88>
 8000fd2:	4b25      	ldr	r3, [pc, #148]	; (8001068 <HAL_UART_RxCpltCallback+0xc8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b32      	cmp	r3, #50	; 0x32
 8000fd8:	dc26      	bgt.n	8001028 <HAL_UART_RxCpltCallback+0x88>
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <HAL_UART_RxCpltCallback+0xcc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	dd22      	ble.n	8001028 <HAL_UART_RxCpltCallback+0x88>
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <HAL_UART_RxCpltCallback+0xcc>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b32      	cmp	r3, #50	; 0x32
 8000fe8:	dc1e      	bgt.n	8001028 <HAL_UART_RxCpltCallback+0x88>
		{
			sprintf(msg,"O Tempo de subida foi configurado para %-3d s \n\r", tempo_aceleracao);
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <HAL_UART_RxCpltCallback+0xc8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4920      	ldr	r1, [pc, #128]	; (8001074 <HAL_UART_RxCpltCallback+0xd4>)
 8000ff2:	4821      	ldr	r0, [pc, #132]	; (8001078 <HAL_UART_RxCpltCallback+0xd8>)
 8000ff4:	f003 fe82 	bl	8004cfc <siprintf>
			HAL_UART_Transmit(&huart3,msg, sizeof(msg), 1000);
 8000ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001000:	491d      	ldr	r1, [pc, #116]	; (8001078 <HAL_UART_RxCpltCallback+0xd8>)
 8001002:	481e      	ldr	r0, [pc, #120]	; (800107c <HAL_UART_RxCpltCallback+0xdc>)
 8001004:	f002 fe1d 	bl	8003c42 <HAL_UART_Transmit>
			sprintf(msg,"O Tempo de descida foi configurado para %-3d s \n\r", tempo_desaceleracao);
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_UART_RxCpltCallback+0xcc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	491c      	ldr	r1, [pc, #112]	; (8001080 <HAL_UART_RxCpltCallback+0xe0>)
 8001010:	4819      	ldr	r0, [pc, #100]	; (8001078 <HAL_UART_RxCpltCallback+0xd8>)
 8001012:	f003 fe73 	bl	8004cfc <siprintf>
			HAL_UART_Transmit(&huart3,msg, sizeof(msg), 1000);
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800101e:	4916      	ldr	r1, [pc, #88]	; (8001078 <HAL_UART_RxCpltCallback+0xd8>)
 8001020:	4816      	ldr	r0, [pc, #88]	; (800107c <HAL_UART_RxCpltCallback+0xdc>)
 8001022:	f002 fe0e 	bl	8003c42 <HAL_UART_Transmit>
 8001026:	e011      	b.n	800104c <HAL_UART_RxCpltCallback+0xac>
		}
		else
		{
			sprintf(msg,"Os Tempos devem estar entre 05 e 50 segundos.\n\r Digite valores nessa faixa!\n\r");
 8001028:	4916      	ldr	r1, [pc, #88]	; (8001084 <HAL_UART_RxCpltCallback+0xe4>)
 800102a:	4813      	ldr	r0, [pc, #76]	; (8001078 <HAL_UART_RxCpltCallback+0xd8>)
 800102c:	f003 fe66 	bl	8004cfc <siprintf>
			tempo_aceleracao = 0;
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_UART_RxCpltCallback+0xc8>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
			tempo_desaceleracao = 0;
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_UART_RxCpltCallback+0xcc>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3,msg, sizeof(msg), 1000);
 800103c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <HAL_UART_RxCpltCallback+0xd8>)
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <HAL_UART_RxCpltCallback+0xdc>)
 8001048:	f002 fdfb 	bl	8003c42 <HAL_UART_Transmit>
		}
		}
		if (rx[0] == 2)
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_UART_RxCpltCallback+0xc4>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d102      	bne.n	800105a <HAL_UART_RxCpltCallback+0xba>
		{
			liga_des =2;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_UART_RxCpltCallback+0xd0>)
 8001056:	2202      	movs	r2, #2
 8001058:	601a      	str	r2, [r3, #0]
		}
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200005ac 	.word	0x200005ac
 8001068:	2000059c 	.word	0x2000059c
 800106c:	200005a0 	.word	0x200005a0
 8001070:	200005c8 	.word	0x200005c8
 8001074:	080055f0 	.word	0x080055f0
 8001078:	20000000 	.word	0x20000000
 800107c:	20000554 	.word	0x20000554
 8001080:	08005624 	.word	0x08005624
 8001084:	08005658 	.word	0x08005658

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010d2:	2007      	movs	r0, #7
 80010d4:	f000 fe86 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_ADC_MspInit+0x7c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d127      	bne.n	8001156 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_ADC_MspInit+0x80>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_ADC_MspInit+0x80>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_ADC_MspInit+0x80>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_ADC_MspInit+0x80>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_ADC_MspInit+0x80>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_ADC_MspInit+0x80>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800113e:	2301      	movs	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001142:	2303      	movs	r3, #3
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_ADC_MspInit+0x84>)
 8001152:	f000 ff1b 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012000 	.word	0x40012000
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000

0800116c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <HAL_TIM_Base_MspInit+0xbc>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12d      	bne.n	80011ea <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_TIM_Base_MspInit+0xc0>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a25      	ldr	r2, [pc, #148]	; (800122c <HAL_TIM_Base_MspInit+0xc0>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <HAL_TIM_Base_MspInit+0xc0>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_TIM_Base_MspInit+0xc0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <HAL_TIM_Base_MspInit+0xc0>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_TIM_Base_MspInit+0xc0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011d8:	2301      	movs	r3, #1
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <HAL_TIM_Base_MspInit+0xc4>)
 80011e4:	f000 fed2 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e8:	e01a      	b.n	8001220 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f2:	d115      	bne.n	8001220 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_TIM_Base_MspInit+0xc0>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a0b      	ldr	r2, [pc, #44]	; (800122c <HAL_TIM_Base_MspInit+0xc0>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_TIM_Base_MspInit+0xc0>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	201c      	movs	r0, #28
 8001216:	f000 fdf0 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800121a:	201c      	movs	r0, #28
 800121c:	f000 fe09 	bl	8001e32 <HAL_NVIC_EnableIRQ>
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010000 	.word	0x40010000
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000

08001234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <HAL_UART_MspInit+0xd0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d152      	bne.n	80012fc <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <HAL_UART_MspInit+0xd4>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <HAL_UART_MspInit+0xd4>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <HAL_UART_MspInit+0xd4>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_UART_MspInit+0xd4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <HAL_UART_MspInit+0xd4>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_UART_MspInit+0xd4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_UART_MspInit+0xd4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <HAL_UART_MspInit+0xd4>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_UART_MspInit+0xd4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012aa:	2320      	movs	r3, #32
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012ba:	2307      	movs	r3, #7
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4811      	ldr	r0, [pc, #68]	; (800130c <HAL_UART_MspInit+0xd8>)
 80012c6:	f000 fe61 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012dc:	2307      	movs	r3, #7
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480a      	ldr	r0, [pc, #40]	; (8001310 <HAL_UART_MspInit+0xdc>)
 80012e8:	f000 fe50 	bl	8001f8c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2027      	movs	r0, #39	; 0x27
 80012f2:	f000 fd82 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012f6:	2027      	movs	r0, #39	; 0x27
 80012f8:	f000 fd9b 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40004800 	.word	0x40004800
 8001308:	40023800 	.word	0x40023800
 800130c:	40020800 	.word	0x40020800
 8001310:	40020400 	.word	0x40020400

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <NMI_Handler+0x4>

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001360:	f000 f8da 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <TIM2_IRQHandler+0x10>)
 800136e:	f001 ff86 	bl	800327e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000050c 	.word	0x2000050c

0800137c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <USART3_IRQHandler+0x10>)
 8001382:	f002 fd21 	bl	8003dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000554 	.word	0x20000554

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f003 fc6a 	bl	8004c98 <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20020000 	.word	0x20020000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	200005dc 	.word	0x200005dc
 80013f8:	200005f8 	.word	0x200005f8

080013fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <SystemInit+0x20>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <SystemInit+0x20>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001458 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001426:	490e      	ldr	r1, [pc, #56]	; (8001460 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001428:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800143c:	4c0b      	ldr	r4, [pc, #44]	; (800146c <LoopFillZerobss+0x26>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800144a:	f7ff ffd7 	bl	80013fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144e:	f003 fc29 	bl	8004ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001452:	f7ff f8af 	bl	80005b4 <main>
  bx  lr    
 8001456:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001458:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	20000460 	.word	0x20000460
  ldr r2, =_sidata
 8001464:	08005704 	.word	0x08005704
  ldr r2, =_sbss
 8001468:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 800146c:	200005f4 	.word	0x200005f4

08001470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC_IRQHandler>
	...

08001474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <HAL_Init+0x40>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <HAL_Init+0x40>)
 800148a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_Init+0x40>)
 8001496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 fca1 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fdf4 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023c00 	.word	0x40023c00

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fcb9 	bl	8001e4e <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 fc81 	bl	8001dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200003f0 	.word	0x200003f0
 8001510:	200003f8 	.word	0x200003f8
 8001514:	200003f4 	.word	0x200003f4

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200003f8 	.word	0x200003f8
 800153c:	200005e0 	.word	0x200005e0

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200005e0 	.word	0x200005e0

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200003f8 	.word	0x200003f8

080015a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e033      	b.n	800161e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fd90 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015e6:	f023 0302 	bic.w	r3, r3, #2
 80015ea:	f043 0202 	orr.w	r2, r3, #2
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fa2a 	bl	8001a4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f023 0303 	bic.w	r3, r3, #3
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
 800160e:	e001      	b.n	8001614 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_ADC_Start+0x1a>
 800163e:	2302      	movs	r3, #2
 8001640:	e0b2      	b.n	80017a8 <HAL_ADC_Start+0x180>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d018      	beq.n	800168a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001668:	4b52      	ldr	r3, [pc, #328]	; (80017b4 <HAL_ADC_Start+0x18c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a52      	ldr	r2, [pc, #328]	; (80017b8 <HAL_ADC_Start+0x190>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	0c9a      	lsrs	r2, r3, #18
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800167c:	e002      	b.n	8001684 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	3b01      	subs	r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f9      	bne.n	800167e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d17a      	bne.n	800178e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d6:	d106      	bne.n	80016e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	f023 0206 	bic.w	r2, r3, #6
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44
 80016e4:	e002      	b.n	80016ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f4:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_ADC_Start+0x194>)
 80016f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001700:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	2b00      	cmp	r3, #0
 800170c:	d12a      	bne.n	8001764 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a2b      	ldr	r2, [pc, #172]	; (80017c0 <HAL_ADC_Start+0x198>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d015      	beq.n	8001744 <HAL_ADC_Start+0x11c>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <HAL_ADC_Start+0x19c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d105      	bne.n	800172e <HAL_ADC_Start+0x106>
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_ADC_Start+0x194>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 031f 	and.w	r3, r3, #31
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00a      	beq.n	8001744 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <HAL_ADC_Start+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d136      	bne.n	80017a6 <HAL_ADC_Start+0x17e>
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_ADC_Start+0x194>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d130      	bne.n	80017a6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d129      	bne.n	80017a6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	e020      	b.n	80017a6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <HAL_ADC_Start+0x198>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d11b      	bne.n	80017a6 <HAL_ADC_Start+0x17e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d114      	bne.n	80017a6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e00b      	b.n	80017a6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f043 0210 	orr.w	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	200003f0 	.word	0x200003f0
 80017b8:	431bde83 	.word	0x431bde83
 80017bc:	40012300 	.word	0x40012300
 80017c0:	40012000 	.word	0x40012000
 80017c4:	40012100 	.word	0x40012100
 80017c8:	40012200 	.word	0x40012200

080017cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1c>
 8001800:	2302      	movs	r3, #2
 8001802:	e113      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x244>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b09      	cmp	r3, #9
 8001812:	d925      	bls.n	8001860 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68d9      	ldr	r1, [r3, #12]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	b29b      	uxth	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	3b1e      	subs	r3, #30
 800182a:	2207      	movs	r2, #7
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43da      	mvns	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	400a      	ands	r2, r1
 8001838:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68d9      	ldr	r1, [r3, #12]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	b29b      	uxth	r3, r3
 800184a:	4618      	mov	r0, r3
 800184c:	4603      	mov	r3, r0
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4403      	add	r3, r0
 8001852:	3b1e      	subs	r3, #30
 8001854:	409a      	lsls	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	e022      	b.n	80018a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6919      	ldr	r1, [r3, #16]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	2207      	movs	r2, #7
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	400a      	ands	r2, r1
 8001882:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6919      	ldr	r1, [r3, #16]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	4603      	mov	r3, r0
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4403      	add	r3, r0
 800189c:	409a      	lsls	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d824      	bhi.n	80018f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	3b05      	subs	r3, #5
 80018c0:	221f      	movs	r2, #31
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	400a      	ands	r2, r1
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	3b05      	subs	r3, #5
 80018ea:	fa00 f203 	lsl.w	r2, r0, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34
 80018f6:	e04c      	b.n	8001992 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	d824      	bhi.n	800194a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	3b23      	subs	r3, #35	; 0x23
 8001912:	221f      	movs	r2, #31
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43da      	mvns	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	400a      	ands	r2, r1
 8001920:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	4618      	mov	r0, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	3b23      	subs	r3, #35	; 0x23
 800193c:	fa00 f203 	lsl.w	r2, r0, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
 8001948:	e023      	b.n	8001992 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	3b41      	subs	r3, #65	; 0x41
 800195c:	221f      	movs	r2, #31
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	400a      	ands	r2, r1
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	3b41      	subs	r3, #65	; 0x41
 8001986:	fa00 f203 	lsl.w	r2, r0, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001992:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_ADC_ConfigChannel+0x250>)
 8001994:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a28      	ldr	r2, [pc, #160]	; (8001a3c <HAL_ADC_ConfigChannel+0x254>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d10f      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1d8>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b12      	cmp	r3, #18
 80019a6:	d10b      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <HAL_ADC_ConfigChannel+0x254>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d12b      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x23a>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <HAL_ADC_ConfigChannel+0x258>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d003      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x1f4>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b11      	cmp	r3, #17
 80019da:	d122      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <HAL_ADC_ConfigChannel+0x258>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d111      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_ADC_ConfigChannel+0x25c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_ADC_ConfigChannel+0x260>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	0c9a      	lsrs	r2, r3, #18
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a14:	e002      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f9      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40012300 	.word	0x40012300
 8001a3c:	40012000 	.word	0x40012000
 8001a40:	10000012 	.word	0x10000012
 8001a44:	200003f0 	.word	0x200003f0
 8001a48:	431bde83 	.word	0x431bde83

08001a4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a54:	4b79      	ldr	r3, [pc, #484]	; (8001c3c <ADC_Init+0x1f0>)
 8001a56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	021a      	lsls	r2, r3, #8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001aa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6899      	ldr	r1, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <ADC_Init+0x1f4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d022      	beq.n	8001b2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001af2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6899      	ldr	r1, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6899      	ldr	r1, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	e00f      	b.n	8001b4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0202 	bic.w	r2, r2, #2
 8001b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6899      	ldr	r1, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7e1b      	ldrb	r3, [r3, #24]
 8001b64:	005a      	lsls	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01b      	beq.n	8001bb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6859      	ldr	r1, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	035a      	lsls	r2, r3, #13
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	e007      	b.n	8001bc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	051a      	lsls	r2, r3, #20
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6899      	ldr	r1, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c02:	025a      	lsls	r2, r3, #9
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6899      	ldr	r1, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	029a      	lsls	r2, r3, #10
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	609a      	str	r2, [r3, #8]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	40012300 	.word	0x40012300
 8001c40:	0f000001 	.word	0x0f000001

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <__NVIC_EnableIRQ+0x38>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f7ff ff8e 	bl	8001ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff29 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff3e 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff8e 	bl	8001d38 <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff5d 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff31 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffa2 	bl	8001da0 <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff fb64 	bl	8001540 <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d008      	beq.n	8001e98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e052      	b.n	8001f3e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0216 	bic.w	r2, r2, #22
 8001ea6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d103      	bne.n	8001ec8 <HAL_DMA_Abort+0x62>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0208 	bic.w	r2, r2, #8
 8001ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee8:	e013      	b.n	8001f12 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eea:	f7ff fb29 	bl	8001540 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d90c      	bls.n	8001f12 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e015      	b.n	8001f3e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e4      	bne.n	8001eea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	223f      	movs	r2, #63	; 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d004      	beq.n	8001f64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e00c      	b.n	8001f7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2205      	movs	r2, #5
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e165      	b.n	8002274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f040 8154 	bne.w	800226e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d005      	beq.n	8001fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d130      	bne.n	8002040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 0201 	and.w	r2, r3, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b03      	cmp	r3, #3
 800204a:	d017      	beq.n	800207c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d123      	bne.n	80020d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80ae 	beq.w	800226e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_GPIO_Init+0x300>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a5c      	ldr	r2, [pc, #368]	; (800228c <HAL_GPIO_Init+0x300>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b5a      	ldr	r3, [pc, #360]	; (800228c <HAL_GPIO_Init+0x300>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212e:	4a58      	ldr	r2, [pc, #352]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4f      	ldr	r2, [pc, #316]	; (8002294 <HAL_GPIO_Init+0x308>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d025      	beq.n	80021a6 <HAL_GPIO_Init+0x21a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4e      	ldr	r2, [pc, #312]	; (8002298 <HAL_GPIO_Init+0x30c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01f      	beq.n	80021a2 <HAL_GPIO_Init+0x216>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4d      	ldr	r2, [pc, #308]	; (800229c <HAL_GPIO_Init+0x310>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d019      	beq.n	800219e <HAL_GPIO_Init+0x212>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4c      	ldr	r2, [pc, #304]	; (80022a0 <HAL_GPIO_Init+0x314>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <HAL_GPIO_Init+0x20e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4b      	ldr	r2, [pc, #300]	; (80022a4 <HAL_GPIO_Init+0x318>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00d      	beq.n	8002196 <HAL_GPIO_Init+0x20a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4a      	ldr	r2, [pc, #296]	; (80022a8 <HAL_GPIO_Init+0x31c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d007      	beq.n	8002192 <HAL_GPIO_Init+0x206>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a49      	ldr	r2, [pc, #292]	; (80022ac <HAL_GPIO_Init+0x320>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_GPIO_Init+0x202>
 800218a:	2306      	movs	r3, #6
 800218c:	e00c      	b.n	80021a8 <HAL_GPIO_Init+0x21c>
 800218e:	2307      	movs	r3, #7
 8002190:	e00a      	b.n	80021a8 <HAL_GPIO_Init+0x21c>
 8002192:	2305      	movs	r3, #5
 8002194:	e008      	b.n	80021a8 <HAL_GPIO_Init+0x21c>
 8002196:	2304      	movs	r3, #4
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x21c>
 800219a:	2303      	movs	r3, #3
 800219c:	e004      	b.n	80021a8 <HAL_GPIO_Init+0x21c>
 800219e:	2302      	movs	r3, #2
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_Init+0x21c>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_GPIO_Init+0x21c>
 80021a6:	2300      	movs	r3, #0
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	f002 0203 	and.w	r2, r2, #3
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	4093      	lsls	r3, r2
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b8:	4935      	ldr	r1, [pc, #212]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c6:	4b3a      	ldr	r3, [pc, #232]	; (80022b0 <HAL_GPIO_Init+0x324>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ea:	4a31      	ldr	r2, [pc, #196]	; (80022b0 <HAL_GPIO_Init+0x324>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f0:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_GPIO_Init+0x324>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002214:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <HAL_GPIO_Init+0x324>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800221a:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <HAL_GPIO_Init+0x324>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800223e:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <HAL_GPIO_Init+0x324>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_GPIO_Init+0x324>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002268:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_GPIO_Init+0x324>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3301      	adds	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	f67f ae96 	bls.w	8001fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40013800 	.word	0x40013800
 8002294:	40020000 	.word	0x40020000
 8002298:	40020400 	.word	0x40020400
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020c00 	.word	0x40020c00
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40021400 	.word	0x40021400
 80022ac:	40021800 	.word	0x40021800
 80022b0:	40013c00 	.word	0x40013c00

080022b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e001      	b.n	80022d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002300:	e003      	b.n	800230a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	041a      	lsls	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	619a      	str	r2, [r3, #24]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002328:	887a      	ldrh	r2, [r7, #2]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	041a      	lsls	r2, r3, #16
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	43d9      	mvns	r1, r3
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	400b      	ands	r3, r1
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0cc      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b68      	ldr	r3, [pc, #416]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d90c      	bls.n	8002388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b65      	ldr	r3, [pc, #404]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b63      	ldr	r3, [pc, #396]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0b8      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a0:	4b59      	ldr	r3, [pc, #356]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a58      	ldr	r2, [pc, #352]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b8:	4b53      	ldr	r3, [pc, #332]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a52      	ldr	r2, [pc, #328]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c4:	4b50      	ldr	r3, [pc, #320]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	494d      	ldr	r1, [pc, #308]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d044      	beq.n	800246c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d119      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e07f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d003      	beq.n	800240a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002406:	2b03      	cmp	r3, #3
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b3f      	ldr	r3, [pc, #252]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e06f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e067      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242a:	4b37      	ldr	r3, [pc, #220]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 0203 	bic.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4934      	ldr	r1, [pc, #208]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7ff f880 	bl	8001540 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	e00a      	b.n	800245a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f7ff f87c 	bl	8001540 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e04f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 020c 	and.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1eb      	bne.n	8002444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d20c      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e032      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4916      	ldr	r1, [pc, #88]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	490e      	ldr	r1, [pc, #56]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024d2:	f000 f855 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	490a      	ldr	r1, [pc, #40]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	5ccb      	ldrb	r3, [r1, r3]
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	4a09      	ldr	r2, [pc, #36]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe ffe0 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023c00 	.word	0x40023c00
 8002508:	40023800 	.word	0x40023800
 800250c:	080056a8 	.word	0x080056a8
 8002510:	200003f0 	.word	0x200003f0
 8002514:	200003f4 	.word	0x200003f4

08002518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_RCC_GetHCLKFreq+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	200003f0 	.word	0x200003f0

08002530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002534:	f7ff fff0 	bl	8002518 <HAL_RCC_GetHCLKFreq>
 8002538:	4602      	mov	r2, r0
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	0a9b      	lsrs	r3, r3, #10
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4903      	ldr	r1, [pc, #12]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	080056b8 	.word	0x080056b8

08002558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800255c:	f7ff ffdc 	bl	8002518 <HAL_RCC_GetHCLKFreq>
 8002560:	4602      	mov	r2, r0
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	0b5b      	lsrs	r3, r3, #13
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	4903      	ldr	r1, [pc, #12]	; (800257c <HAL_RCC_GetPCLK2Freq+0x24>)
 800256e:	5ccb      	ldrb	r3, [r1, r3]
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40023800 	.word	0x40023800
 800257c:	080056b8 	.word	0x080056b8

08002580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002584:	b0ae      	sub	sp, #184	; 0xb8
 8002586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a6:	4bcb      	ldr	r3, [pc, #812]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	f200 8206 	bhi.w	80029c0 <HAL_RCC_GetSysClockFreq+0x440>
 80025b4:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025f1 	.word	0x080025f1
 80025c0:	080029c1 	.word	0x080029c1
 80025c4:	080029c1 	.word	0x080029c1
 80025c8:	080029c1 	.word	0x080029c1
 80025cc:	080025f9 	.word	0x080025f9
 80025d0:	080029c1 	.word	0x080029c1
 80025d4:	080029c1 	.word	0x080029c1
 80025d8:	080029c1 	.word	0x080029c1
 80025dc:	08002601 	.word	0x08002601
 80025e0:	080029c1 	.word	0x080029c1
 80025e4:	080029c1 	.word	0x080029c1
 80025e8:	080029c1 	.word	0x080029c1
 80025ec:	080027f1 	.word	0x080027f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4bb9      	ldr	r3, [pc, #740]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80025f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80025f6:	e1e7      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f8:	4bb8      	ldr	r3, [pc, #736]	; (80028dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80025fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025fe:	e1e3      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002600:	4bb4      	ldr	r3, [pc, #720]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800260c:	4bb1      	ldr	r3, [pc, #708]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d071      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002618:	4bae      	ldr	r3, [pc, #696]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	2200      	movs	r2, #0
 8002620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002624:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800262c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002630:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800263a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800263e:	4622      	mov	r2, r4
 8002640:	462b      	mov	r3, r5
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	0159      	lsls	r1, r3, #5
 800264c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002650:	0150      	lsls	r0, r2, #5
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4621      	mov	r1, r4
 8002658:	1a51      	subs	r1, r2, r1
 800265a:	6439      	str	r1, [r7, #64]	; 0x40
 800265c:	4629      	mov	r1, r5
 800265e:	eb63 0301 	sbc.w	r3, r3, r1
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002670:	4649      	mov	r1, r9
 8002672:	018b      	lsls	r3, r1, #6
 8002674:	4641      	mov	r1, r8
 8002676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800267a:	4641      	mov	r1, r8
 800267c:	018a      	lsls	r2, r1, #6
 800267e:	4641      	mov	r1, r8
 8002680:	1a51      	subs	r1, r2, r1
 8002682:	63b9      	str	r1, [r7, #56]	; 0x38
 8002684:	4649      	mov	r1, r9
 8002686:	eb63 0301 	sbc.w	r3, r3, r1
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002698:	4649      	mov	r1, r9
 800269a:	00cb      	lsls	r3, r1, #3
 800269c:	4641      	mov	r1, r8
 800269e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026a2:	4641      	mov	r1, r8
 80026a4:	00ca      	lsls	r2, r1, #3
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	4622      	mov	r2, r4
 80026ae:	189b      	adds	r3, r3, r2
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
 80026b2:	462b      	mov	r3, r5
 80026b4:	460a      	mov	r2, r1
 80026b6:	eb42 0303 	adc.w	r3, r2, r3
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026c8:	4629      	mov	r1, r5
 80026ca:	024b      	lsls	r3, r1, #9
 80026cc:	4621      	mov	r1, r4
 80026ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026d2:	4621      	mov	r1, r4
 80026d4:	024a      	lsls	r2, r1, #9
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026de:	2200      	movs	r2, #0
 80026e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80026ec:	f7fd fde0 	bl	80002b0 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4613      	mov	r3, r2
 80026f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026fa:	e067      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	2200      	movs	r2, #0
 8002704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002708:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800270c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002714:	67bb      	str	r3, [r7, #120]	; 0x78
 8002716:	2300      	movs	r3, #0
 8002718:	67fb      	str	r3, [r7, #124]	; 0x7c
 800271a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800271e:	4622      	mov	r2, r4
 8002720:	462b      	mov	r3, r5
 8002722:	f04f 0000 	mov.w	r0, #0
 8002726:	f04f 0100 	mov.w	r1, #0
 800272a:	0159      	lsls	r1, r3, #5
 800272c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002730:	0150      	lsls	r0, r2, #5
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4621      	mov	r1, r4
 8002738:	1a51      	subs	r1, r2, r1
 800273a:	62b9      	str	r1, [r7, #40]	; 0x28
 800273c:	4629      	mov	r1, r5
 800273e:	eb63 0301 	sbc.w	r3, r3, r1
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002750:	4649      	mov	r1, r9
 8002752:	018b      	lsls	r3, r1, #6
 8002754:	4641      	mov	r1, r8
 8002756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800275a:	4641      	mov	r1, r8
 800275c:	018a      	lsls	r2, r1, #6
 800275e:	4641      	mov	r1, r8
 8002760:	ebb2 0a01 	subs.w	sl, r2, r1
 8002764:	4649      	mov	r1, r9
 8002766:	eb63 0b01 	sbc.w	fp, r3, r1
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002776:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800277a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800277e:	4692      	mov	sl, r2
 8002780:	469b      	mov	fp, r3
 8002782:	4623      	mov	r3, r4
 8002784:	eb1a 0303 	adds.w	r3, sl, r3
 8002788:	623b      	str	r3, [r7, #32]
 800278a:	462b      	mov	r3, r5
 800278c:	eb4b 0303 	adc.w	r3, fp, r3
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027b4:	2200      	movs	r2, #0
 80027b6:	673b      	str	r3, [r7, #112]	; 0x70
 80027b8:	677a      	str	r2, [r7, #116]	; 0x74
 80027ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80027be:	f7fd fd77 	bl	80002b0 <__aeabi_uldivmod>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4613      	mov	r3, r2
 80027c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027cc:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	3301      	adds	r3, #1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80027de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027ee:	e0eb      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f0:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027fc:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d06b      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002808:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	099b      	lsrs	r3, r3, #6
 800280e:	2200      	movs	r2, #0
 8002810:	66bb      	str	r3, [r7, #104]	; 0x68
 8002812:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281a:	663b      	str	r3, [r7, #96]	; 0x60
 800281c:	2300      	movs	r3, #0
 800281e:	667b      	str	r3, [r7, #100]	; 0x64
 8002820:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002824:	4622      	mov	r2, r4
 8002826:	462b      	mov	r3, r5
 8002828:	f04f 0000 	mov.w	r0, #0
 800282c:	f04f 0100 	mov.w	r1, #0
 8002830:	0159      	lsls	r1, r3, #5
 8002832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002836:	0150      	lsls	r0, r2, #5
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4621      	mov	r1, r4
 800283e:	1a51      	subs	r1, r2, r1
 8002840:	61b9      	str	r1, [r7, #24]
 8002842:	4629      	mov	r1, r5
 8002844:	eb63 0301 	sbc.w	r3, r3, r1
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002856:	4659      	mov	r1, fp
 8002858:	018b      	lsls	r3, r1, #6
 800285a:	4651      	mov	r1, sl
 800285c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002860:	4651      	mov	r1, sl
 8002862:	018a      	lsls	r2, r1, #6
 8002864:	4651      	mov	r1, sl
 8002866:	ebb2 0801 	subs.w	r8, r2, r1
 800286a:	4659      	mov	r1, fp
 800286c:	eb63 0901 	sbc.w	r9, r3, r1
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800287c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002880:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002884:	4690      	mov	r8, r2
 8002886:	4699      	mov	r9, r3
 8002888:	4623      	mov	r3, r4
 800288a:	eb18 0303 	adds.w	r3, r8, r3
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	462b      	mov	r3, r5
 8002892:	eb49 0303 	adc.w	r3, r9, r3
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028a4:	4629      	mov	r1, r5
 80028a6:	024b      	lsls	r3, r1, #9
 80028a8:	4621      	mov	r1, r4
 80028aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028ae:	4621      	mov	r1, r4
 80028b0:	024a      	lsls	r2, r1, #9
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028ba:	2200      	movs	r2, #0
 80028bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80028be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028c4:	f7fd fcf4 	bl	80002b0 <__aeabi_uldivmod>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4613      	mov	r3, r2
 80028ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028d2:	e065      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x420>
 80028d4:	40023800 	.word	0x40023800
 80028d8:	00f42400 	.word	0x00f42400
 80028dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e0:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	2200      	movs	r2, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	4611      	mov	r1, r2
 80028ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028f0:	653b      	str	r3, [r7, #80]	; 0x50
 80028f2:	2300      	movs	r3, #0
 80028f4:	657b      	str	r3, [r7, #84]	; 0x54
 80028f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80028fa:	4642      	mov	r2, r8
 80028fc:	464b      	mov	r3, r9
 80028fe:	f04f 0000 	mov.w	r0, #0
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	0159      	lsls	r1, r3, #5
 8002908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290c:	0150      	lsls	r0, r2, #5
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4641      	mov	r1, r8
 8002914:	1a51      	subs	r1, r2, r1
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	4649      	mov	r1, r9
 800291a:	eb63 0301 	sbc.w	r3, r3, r1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800292c:	4659      	mov	r1, fp
 800292e:	018b      	lsls	r3, r1, #6
 8002930:	4651      	mov	r1, sl
 8002932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002936:	4651      	mov	r1, sl
 8002938:	018a      	lsls	r2, r1, #6
 800293a:	4651      	mov	r1, sl
 800293c:	1a54      	subs	r4, r2, r1
 800293e:	4659      	mov	r1, fp
 8002940:	eb63 0501 	sbc.w	r5, r3, r1
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	00eb      	lsls	r3, r5, #3
 800294e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002952:	00e2      	lsls	r2, r4, #3
 8002954:	4614      	mov	r4, r2
 8002956:	461d      	mov	r5, r3
 8002958:	4643      	mov	r3, r8
 800295a:	18e3      	adds	r3, r4, r3
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	464b      	mov	r3, r9
 8002960:	eb45 0303 	adc.w	r3, r5, r3
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002972:	4629      	mov	r1, r5
 8002974:	028b      	lsls	r3, r1, #10
 8002976:	4621      	mov	r1, r4
 8002978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800297c:	4621      	mov	r1, r4
 800297e:	028a      	lsls	r2, r1, #10
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002988:	2200      	movs	r2, #0
 800298a:	64bb      	str	r3, [r7, #72]	; 0x48
 800298c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800298e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002992:	f7fd fc8d 	bl	80002b0 <__aeabi_uldivmod>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4613      	mov	r3, r2
 800299c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0f1b      	lsrs	r3, r3, #28
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80029ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029be:	e003      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80029c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	37b8      	adds	r7, #184	; 0xb8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800
 80029dc:	00f42400 	.word	0x00f42400

080029e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e28d      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8083 	beq.w	8002b06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a00:	4b94      	ldr	r3, [pc, #592]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d019      	beq.n	8002a40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a0c:	4b91      	ldr	r3, [pc, #580]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d106      	bne.n	8002a26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a18:	4b8e      	ldr	r3, [pc, #568]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a24:	d00c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a26:	4b8b      	ldr	r3, [pc, #556]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d112      	bne.n	8002a58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a32:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a3e:	d10b      	bne.n	8002a58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	4b84      	ldr	r3, [pc, #528]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d05b      	beq.n	8002b04 <HAL_RCC_OscConfig+0x124>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d157      	bne.n	8002b04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e25a      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a60:	d106      	bne.n	8002a70 <HAL_RCC_OscConfig+0x90>
 8002a62:	4b7c      	ldr	r3, [pc, #496]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7b      	ldr	r2, [pc, #492]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e01d      	b.n	8002aac <HAL_RCC_OscConfig+0xcc>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0xb4>
 8002a7a:	4b76      	ldr	r3, [pc, #472]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a75      	ldr	r2, [pc, #468]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b73      	ldr	r3, [pc, #460]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a72      	ldr	r2, [pc, #456]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0xcc>
 8002a94:	4b6f      	ldr	r3, [pc, #444]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6e      	ldr	r2, [pc, #440]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b6c      	ldr	r3, [pc, #432]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6b      	ldr	r2, [pc, #428]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d013      	beq.n	8002adc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fd44 	bl	8001540 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe fd40 	bl	8001540 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e21f      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0xdc>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fd30 	bl	8001540 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fd2c 	bl	8001540 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e20b      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	4b57      	ldr	r3, [pc, #348]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x104>
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d06f      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b12:	4b50      	ldr	r3, [pc, #320]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d017      	beq.n	8002b4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b1e:	4b4d      	ldr	r3, [pc, #308]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d105      	bne.n	8002b36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b36:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d11c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b42:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_RCC_OscConfig+0x186>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e1d3      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4937      	ldr	r1, [pc, #220]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	e03a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b84:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <HAL_RCC_OscConfig+0x278>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fcd9 	bl	8001540 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b92:	f7fe fcd5 	bl	8001540 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1b4      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4925      	ldr	r1, [pc, #148]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_OscConfig+0x278>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fcb8 	bl	8001540 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fcb4 	bl	8001540 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e193      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d036      	beq.n	8002c6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_RCC_OscConfig+0x27c>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fc98 	bl	8001540 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c14:	f7fe fc94 	bl	8001540 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e173      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x234>
 8002c32:	e01b      	b.n	8002c6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCC_OscConfig+0x27c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fc81 	bl	8001540 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	e00e      	b.n	8002c60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c42:	f7fe fc7d 	bl	8001540 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d907      	bls.n	8002c60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e15c      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	42470000 	.word	0x42470000
 8002c5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	4b8a      	ldr	r3, [pc, #552]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ea      	bne.n	8002c42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 8097 	beq.w	8002da8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7e:	4b83      	ldr	r3, [pc, #524]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10f      	bne.n	8002caa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	4b7f      	ldr	r3, [pc, #508]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a7e      	ldr	r2, [pc, #504]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b7c      	ldr	r3, [pc, #496]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002caa:	4b79      	ldr	r3, [pc, #484]	; (8002e90 <HAL_RCC_OscConfig+0x4b0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d118      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb6:	4b76      	ldr	r3, [pc, #472]	; (8002e90 <HAL_RCC_OscConfig+0x4b0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a75      	ldr	r2, [pc, #468]	; (8002e90 <HAL_RCC_OscConfig+0x4b0>)
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fc3d 	bl	8001540 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cca:	f7fe fc39 	bl	8001540 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e118      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b6c      	ldr	r3, [pc, #432]	; (8002e90 <HAL_RCC_OscConfig+0x4b0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x31e>
 8002cf0:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	4a65      	ldr	r2, [pc, #404]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfc:	e01c      	b.n	8002d38 <HAL_RCC_OscConfig+0x358>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x340>
 8002d06:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a60      	ldr	r2, [pc, #384]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
 8002d12:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a5d      	ldr	r2, [pc, #372]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0x358>
 8002d20:	4b5a      	ldr	r3, [pc, #360]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a59      	ldr	r2, [pc, #356]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	4b57      	ldr	r3, [pc, #348]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a56      	ldr	r2, [pc, #344]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	f023 0304 	bic.w	r3, r3, #4
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d015      	beq.n	8002d6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe fbfe 	bl	8001540 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fe fbfa 	bl	8001540 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e0d7      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	4b4b      	ldr	r3, [pc, #300]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0ee      	beq.n	8002d48 <HAL_RCC_OscConfig+0x368>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6c:	f7fe fbe8 	bl	8001540 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f7fe fbe4 	bl	8001540 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0c1      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8a:	4b40      	ldr	r3, [pc, #256]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ee      	bne.n	8002d74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9c:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	4a3a      	ldr	r2, [pc, #232]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80ad 	beq.w	8002f0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002db2:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d060      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d145      	bne.n	8002e52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_RCC_OscConfig+0x4b4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fbb8 	bl	8001540 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe fbb4 	bl	8001540 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e093      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	019b      	lsls	r3, r3, #6
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	061b      	lsls	r3, r3, #24
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	071b      	lsls	r3, r3, #28
 8002e1e:	491b      	ldr	r1, [pc, #108]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x4b4>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fb89 	bl	8001540 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fe fb85 	bl	8001540 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e064      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x452>
 8002e50:	e05c      	b.n	8002f0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_RCC_OscConfig+0x4b4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fb72 	bl	8001540 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fb6e 	bl	8001540 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e04d      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x480>
 8002e7e:	e045      	b.n	8002f0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e040      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40007000 	.word	0x40007000
 8002e94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e98:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <HAL_RCC_OscConfig+0x538>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d030      	beq.n	8002f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d129      	bne.n	8002f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d122      	bne.n	8002f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ec8:	4013      	ands	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ece:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d119      	bne.n	8002f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d10f      	bne.n	8002f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800

08002f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e041      	b.n	8002fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe f912 	bl	800116c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f000 fbc8 	bl	80036f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d001      	beq.n	8002fd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e046      	b.n	8003062 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a23      	ldr	r2, [pc, #140]	; (8003070 <HAL_TIM_Base_Start+0xb4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d022      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fee:	d01d      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <HAL_TIM_Base_Start+0xb8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d018      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <HAL_TIM_Base_Start+0xbc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1c      	ldr	r2, [pc, #112]	; (800307c <HAL_TIM_Base_Start+0xc0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00e      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <HAL_TIM_Base_Start+0xc4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d009      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a19      	ldr	r2, [pc, #100]	; (8003084 <HAL_TIM_Base_Start+0xc8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <HAL_TIM_Base_Start+0x70>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <HAL_TIM_Base_Start+0xcc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d111      	bne.n	8003050 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b06      	cmp	r3, #6
 800303c:	d010      	beq.n	8003060 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304e:	e007      	b.n	8003060 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40010400 	.word	0x40010400
 8003084:	40014000 	.word	0x40014000
 8003088:	40001800 	.word	0x40001800

0800308c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e04e      	b.n	8003142 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a23      	ldr	r2, [pc, #140]	; (8003150 <HAL_TIM_Base_Start_IT+0xc4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d022      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ce:	d01d      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_TIM_Base_Start_IT+0xc8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d018      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <HAL_TIM_Base_Start_IT+0xcc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d013      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_TIM_Base_Start_IT+0xd0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00e      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_TIM_Base_Start_IT+0xd4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d009      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a19      	ldr	r2, [pc, #100]	; (8003164 <HAL_TIM_Base_Start_IT+0xd8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x80>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a18      	ldr	r2, [pc, #96]	; (8003168 <HAL_TIM_Base_Start_IT+0xdc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d111      	bne.n	8003130 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b06      	cmp	r3, #6
 800311c:	d010      	beq.n	8003140 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0201 	orr.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312e:	e007      	b.n	8003140 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40010000 	.word	0x40010000
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40010400 	.word	0x40010400
 8003164:	40014000 	.word	0x40014000
 8003168:	40001800 	.word	0x40001800

0800316c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	f241 1311 	movw	r3, #4369	; 0x1111
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10f      	bne.n	80031b4 <HAL_TIM_Base_Stop_IT+0x48>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	f240 4344 	movw	r3, #1092	; 0x444
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d107      	bne.n	80031b4 <HAL_TIM_Base_Stop_IT+0x48>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e041      	b.n	8003262 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f839 	bl	800326a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f000 fa70 	bl	80036f0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0208 	bic.w	r2, r2, #8
 800321e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b02      	cmp	r3, #2
 8003292:	d122      	bne.n	80032da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d11b      	bne.n	80032da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f06f 0202 	mvn.w	r2, #2
 80032aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f9f7 	bl	80036b4 <HAL_TIM_IC_CaptureCallback>
 80032c6:	e005      	b.n	80032d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f9e9 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f9fa 	bl	80036c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d122      	bne.n	800332e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d11b      	bne.n	800332e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f06f 0204 	mvn.w	r2, #4
 80032fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f9cd 	bl	80036b4 <HAL_TIM_IC_CaptureCallback>
 800331a:	e005      	b.n	8003328 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f9bf 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f9d0 	bl	80036c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d122      	bne.n	8003382 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b08      	cmp	r3, #8
 8003348:	d11b      	bne.n	8003382 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f06f 0208 	mvn.w	r2, #8
 8003352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2204      	movs	r2, #4
 8003358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f9a3 	bl	80036b4 <HAL_TIM_IC_CaptureCallback>
 800336e:	e005      	b.n	800337c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f995 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f9a6 	bl	80036c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b10      	cmp	r3, #16
 800338e:	d122      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b10      	cmp	r3, #16
 800339c:	d11b      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0210 	mvn.w	r2, #16
 80033a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2208      	movs	r2, #8
 80033ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f979 	bl	80036b4 <HAL_TIM_IC_CaptureCallback>
 80033c2:	e005      	b.n	80033d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f96b 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f97c 	bl	80036c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d10e      	bne.n	8003402 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d107      	bne.n	8003402 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f06f 0201 	mvn.w	r2, #1
 80033fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7fd fcc7 	bl	8000d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b80      	cmp	r3, #128	; 0x80
 800340e:	d10e      	bne.n	800342e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	2b80      	cmp	r3, #128	; 0x80
 800341c:	d107      	bne.n	800342e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fbb3 	bl	8003b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b40      	cmp	r3, #64	; 0x40
 800343a:	d10e      	bne.n	800345a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d107      	bne.n	800345a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f941 	bl	80036dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b20      	cmp	r3, #32
 8003466:	d10e      	bne.n	8003486 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b20      	cmp	r3, #32
 8003474:	d107      	bne.n	8003486 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f06f 0220 	mvn.w	r2, #32
 800347e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fb7d 	bl	8003b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_ConfigClockSource+0x1c>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e0b4      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x186>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e2:	d03e      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0xd4>
 80034e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e8:	f200 8087 	bhi.w	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	f000 8086 	beq.w	8003600 <HAL_TIM_ConfigClockSource+0x172>
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	d87f      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 80034fa:	2b70      	cmp	r3, #112	; 0x70
 80034fc:	d01a      	beq.n	8003534 <HAL_TIM_ConfigClockSource+0xa6>
 80034fe:	2b70      	cmp	r3, #112	; 0x70
 8003500:	d87b      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 8003502:	2b60      	cmp	r3, #96	; 0x60
 8003504:	d050      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0x11a>
 8003506:	2b60      	cmp	r3, #96	; 0x60
 8003508:	d877      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 800350a:	2b50      	cmp	r3, #80	; 0x50
 800350c:	d03c      	beq.n	8003588 <HAL_TIM_ConfigClockSource+0xfa>
 800350e:	2b50      	cmp	r3, #80	; 0x50
 8003510:	d873      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 8003512:	2b40      	cmp	r3, #64	; 0x40
 8003514:	d058      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0x13a>
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d86f      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 800351a:	2b30      	cmp	r3, #48	; 0x30
 800351c:	d064      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x15a>
 800351e:	2b30      	cmp	r3, #48	; 0x30
 8003520:	d86b      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 8003522:	2b20      	cmp	r3, #32
 8003524:	d060      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x15a>
 8003526:	2b20      	cmp	r3, #32
 8003528:	d867      	bhi.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d05c      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x15a>
 800352e:	2b10      	cmp	r3, #16
 8003530:	d05a      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x15a>
 8003532:	e062      	b.n	80035fa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f000 fa7f 	bl	8003a46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003556:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	609a      	str	r2, [r3, #8]
      break;
 8003560:	e04f      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6899      	ldr	r1, [r3, #8]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f000 fa68 	bl	8003a46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003584:	609a      	str	r2, [r3, #8]
      break;
 8003586:	e03c      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	461a      	mov	r2, r3
 8003596:	f000 f9dc 	bl	8003952 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2150      	movs	r1, #80	; 0x50
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fa35 	bl	8003a10 <TIM_ITRx_SetConfig>
      break;
 80035a6:	e02c      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	461a      	mov	r2, r3
 80035b6:	f000 f9fb 	bl	80039b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2160      	movs	r1, #96	; 0x60
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fa25 	bl	8003a10 <TIM_ITRx_SetConfig>
      break;
 80035c6:	e01c      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	461a      	mov	r2, r3
 80035d6:	f000 f9bc 	bl	8003952 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2140      	movs	r1, #64	; 0x40
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa15 	bl	8003a10 <TIM_ITRx_SetConfig>
      break;
 80035e6:	e00c      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f000 fa0c 	bl	8003a10 <TIM_ITRx_SetConfig>
      break;
 80035f8:	e003      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
      break;
 80035fe:	e000      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003600:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003630:	2302      	movs	r3, #2
 8003632:	e031      	b.n	8003698 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003644:	6839      	ldr	r1, [r7, #0]
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8f2 	bl	8003830 <TIM_SlaveTimer_SetConfig>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e018      	b.n	8003698 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003674:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003684:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a40      	ldr	r2, [pc, #256]	; (8003804 <TIM_Base_SetConfig+0x114>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <TIM_Base_SetConfig+0x40>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370e:	d00f      	beq.n	8003730 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3d      	ldr	r2, [pc, #244]	; (8003808 <TIM_Base_SetConfig+0x118>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00b      	beq.n	8003730 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3c      	ldr	r2, [pc, #240]	; (800380c <TIM_Base_SetConfig+0x11c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d007      	beq.n	8003730 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3b      	ldr	r2, [pc, #236]	; (8003810 <TIM_Base_SetConfig+0x120>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <TIM_Base_SetConfig+0x124>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d108      	bne.n	8003742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a2f      	ldr	r2, [pc, #188]	; (8003804 <TIM_Base_SetConfig+0x114>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d02b      	beq.n	80037a2 <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003750:	d027      	beq.n	80037a2 <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2c      	ldr	r2, [pc, #176]	; (8003808 <TIM_Base_SetConfig+0x118>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d023      	beq.n	80037a2 <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2b      	ldr	r2, [pc, #172]	; (800380c <TIM_Base_SetConfig+0x11c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01f      	beq.n	80037a2 <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2a      	ldr	r2, [pc, #168]	; (8003810 <TIM_Base_SetConfig+0x120>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01b      	beq.n	80037a2 <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a29      	ldr	r2, [pc, #164]	; (8003814 <TIM_Base_SetConfig+0x124>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d017      	beq.n	80037a2 <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a28      	ldr	r2, [pc, #160]	; (8003818 <TIM_Base_SetConfig+0x128>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a27      	ldr	r2, [pc, #156]	; (800381c <TIM_Base_SetConfig+0x12c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00f      	beq.n	80037a2 <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a26      	ldr	r2, [pc, #152]	; (8003820 <TIM_Base_SetConfig+0x130>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00b      	beq.n	80037a2 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a25      	ldr	r2, [pc, #148]	; (8003824 <TIM_Base_SetConfig+0x134>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a24      	ldr	r2, [pc, #144]	; (8003828 <TIM_Base_SetConfig+0x138>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d003      	beq.n	80037a2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a23      	ldr	r2, [pc, #140]	; (800382c <TIM_Base_SetConfig+0x13c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d108      	bne.n	80037b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <TIM_Base_SetConfig+0x114>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_Base_SetConfig+0xf8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a0c      	ldr	r2, [pc, #48]	; (8003814 <TIM_Base_SetConfig+0x124>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d103      	bne.n	80037f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	615a      	str	r2, [r3, #20]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40010000 	.word	0x40010000
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800
 8003810:	40000c00 	.word	0x40000c00
 8003814:	40010400 	.word	0x40010400
 8003818:	40014000 	.word	0x40014000
 800381c:	40014400 	.word	0x40014400
 8003820:	40014800 	.word	0x40014800
 8003824:	40001800 	.word	0x40001800
 8003828:	40001c00 	.word	0x40001c00
 800382c:	40002000 	.word	0x40002000

08003830 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f023 0307 	bic.w	r3, r3, #7
 800385e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b70      	cmp	r3, #112	; 0x70
 8003878:	d01a      	beq.n	80038b0 <TIM_SlaveTimer_SetConfig+0x80>
 800387a:	2b70      	cmp	r3, #112	; 0x70
 800387c:	d860      	bhi.n	8003940 <TIM_SlaveTimer_SetConfig+0x110>
 800387e:	2b60      	cmp	r3, #96	; 0x60
 8003880:	d054      	beq.n	800392c <TIM_SlaveTimer_SetConfig+0xfc>
 8003882:	2b60      	cmp	r3, #96	; 0x60
 8003884:	d85c      	bhi.n	8003940 <TIM_SlaveTimer_SetConfig+0x110>
 8003886:	2b50      	cmp	r3, #80	; 0x50
 8003888:	d046      	beq.n	8003918 <TIM_SlaveTimer_SetConfig+0xe8>
 800388a:	2b50      	cmp	r3, #80	; 0x50
 800388c:	d858      	bhi.n	8003940 <TIM_SlaveTimer_SetConfig+0x110>
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d019      	beq.n	80038c6 <TIM_SlaveTimer_SetConfig+0x96>
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d854      	bhi.n	8003940 <TIM_SlaveTimer_SetConfig+0x110>
 8003896:	2b30      	cmp	r3, #48	; 0x30
 8003898:	d055      	beq.n	8003946 <TIM_SlaveTimer_SetConfig+0x116>
 800389a:	2b30      	cmp	r3, #48	; 0x30
 800389c:	d850      	bhi.n	8003940 <TIM_SlaveTimer_SetConfig+0x110>
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d051      	beq.n	8003946 <TIM_SlaveTimer_SetConfig+0x116>
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d84c      	bhi.n	8003940 <TIM_SlaveTimer_SetConfig+0x110>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d04d      	beq.n	8003946 <TIM_SlaveTimer_SetConfig+0x116>
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d04b      	beq.n	8003946 <TIM_SlaveTimer_SetConfig+0x116>
 80038ae:	e047      	b.n	8003940 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68d9      	ldr	r1, [r3, #12]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f000 f8c1 	bl	8003a46 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80038c4:	e040      	b.n	8003948 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d101      	bne.n	80038d2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e03b      	b.n	800394a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	4313      	orrs	r3, r2
 8003904:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	621a      	str	r2, [r3, #32]
      break;
 8003916:	e017      	b.n	8003948 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6899      	ldr	r1, [r3, #8]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	461a      	mov	r2, r3
 8003926:	f000 f814 	bl	8003952 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800392a:	e00d      	b.n	8003948 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6899      	ldr	r1, [r3, #8]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	461a      	mov	r2, r3
 800393a:	f000 f839 	bl	80039b0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800393e:	e003      	b.n	8003948 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	75fb      	strb	r3, [r7, #23]
      break;
 8003944:	e000      	b.n	8003948 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003946:	bf00      	nop
  }

  return status;
 8003948:	7dfb      	ldrb	r3, [r7, #23]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003952:	b480      	push	{r7}
 8003954:	b087      	sub	sp, #28
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f023 0201 	bic.w	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800397c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 030a 	bic.w	r3, r3, #10
 800398e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	621a      	str	r2, [r3, #32]
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f023 0210 	bic.w	r2, r3, #16
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	031b      	lsls	r3, r3, #12
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	621a      	str	r2, [r3, #32]
}
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f043 0307 	orr.w	r3, r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	609a      	str	r2, [r3, #8]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	021a      	lsls	r2, r3, #8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	609a      	str	r2, [r3, #8]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e05a      	b.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d022      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d01d      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d018      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1b      	ldr	r2, [pc, #108]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00e      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d009      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d004      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10c      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00
 8003b74:	40010400 	.word	0x40010400
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40001800 	.word	0x40001800

08003b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e03f      	b.n	8003c3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fd fb30 	bl	8001234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fddf 	bl	80047b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b08a      	sub	sp, #40	; 0x28
 8003c46:	af02      	add	r7, sp, #8
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d17c      	bne.n	8003d5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_UART_Transmit+0x2c>
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e075      	b.n	8003d5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Transmit+0x3e>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e06e      	b.n	8003d5e <HAL_UART_Transmit+0x11c>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2221      	movs	r2, #33	; 0x21
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c96:	f7fd fc53 	bl	8001540 <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	88fa      	ldrh	r2, [r7, #6]
 8003ca6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	d108      	bne.n	8003cc4 <HAL_UART_Transmit+0x82>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	e003      	b.n	8003ccc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cd4:	e02a      	b.n	8003d2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fb1f 	bl	8004324 <UART_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e036      	b.n	8003d5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	3302      	adds	r3, #2
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	e007      	b.n	8003d1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1cf      	bne.n	8003cd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 faef 	bl	8004324 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e006      	b.n	8003d5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	4613      	mov	r3, r2
 8003d72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d11d      	bne.n	8003dbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_UART_Receive_IT+0x26>
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e016      	b.n	8003dbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_UART_Receive_IT+0x38>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e00f      	b.n	8003dbe <HAL_UART_Receive_IT+0x58>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fb24 	bl	8004400 <UART_Start_Receive_IT>
 8003db8:	4603      	mov	r3, r0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b0ba      	sub	sp, #232	; 0xe8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HAL_UART_IRQHandler+0x66>
 8003e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fc07 	bl	800463a <UART_Receive_IT>
      return;
 8003e2c:	e256      	b.n	80042dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80de 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x22c>
 8003e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80d1 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_UART_IRQHandler+0xae>
 8003e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_UART_IRQHandler+0xd2>
 8003e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f043 0202 	orr.w	r2, r3, #2
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <HAL_UART_IRQHandler+0xf6>
 8003ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f043 0204 	orr.w	r2, r3, #4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d011      	beq.n	8003eee <HAL_UART_IRQHandler+0x126>
 8003eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d105      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f043 0208 	orr.w	r2, r3, #8
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 81ed 	beq.w	80042d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_UART_IRQHandler+0x14e>
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fb92 	bl	800463a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b40      	cmp	r3, #64	; 0x40
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d103      	bne.n	8003f42 <HAL_UART_IRQHandler+0x17a>
 8003f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d04f      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fa9a 	bl	800447c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b40      	cmp	r3, #64	; 0x40
 8003f54:	d141      	bne.n	8003fda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3314      	adds	r3, #20
 8003f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1d9      	bne.n	8003f56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d013      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	4a7d      	ldr	r2, [pc, #500]	; (80041a4 <HAL_UART_IRQHandler+0x3dc>)
 8003fb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd ffc5 	bl	8001f46 <HAL_DMA_Abort_IT>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	e00e      	b.n	8003ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f990 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd8:	e00a      	b.n	8003ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f98c 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe0:	e006      	b.n	8003ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f988 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fee:	e170      	b.n	80042d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff0:	bf00      	nop
    return;
 8003ff2:	e16e      	b.n	80042d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	f040 814a 	bne.w	8004292 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8143 	beq.w	8004292 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 813c 	beq.w	8004292 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b40      	cmp	r3, #64	; 0x40
 800403c:	f040 80b4 	bne.w	80041a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800404c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 8140 	beq.w	80042d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800405a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800405e:	429a      	cmp	r2, r3
 8004060:	f080 8139 	bcs.w	80042d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800406a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004076:	f000 8088 	beq.w	800418a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	330c      	adds	r3, #12
 8004080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1d9      	bne.n	800407a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3314      	adds	r3, #20
 80040e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e1      	bne.n	80040c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3314      	adds	r3, #20
 8004122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004126:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004128:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800412c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e3      	bne.n	8004102 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800415a:	f023 0310 	bic.w	r3, r3, #16
 800415e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800416c:	65ba      	str	r2, [r7, #88]	; 0x58
 800416e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004172:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800417a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e3      	bne.n	8004148 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	4618      	mov	r0, r3
 8004186:	f7fd fe6e 	bl	8001e66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004192:	b29b      	uxth	r3, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	b29b      	uxth	r3, r3
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8b6 	bl	800430c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041a0:	e099      	b.n	80042d6 <HAL_UART_IRQHandler+0x50e>
 80041a2:	bf00      	nop
 80041a4:	08004543 	.word	0x08004543
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 808b 	beq.w	80042da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80041c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8086 	beq.w	80042da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041f2:	647a      	str	r2, [r7, #68]	; 0x44
 80041f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e3      	bne.n	80041ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3314      	adds	r3, #20
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	623b      	str	r3, [r7, #32]
   return(result);
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3314      	adds	r3, #20
 8004226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800422a:	633a      	str	r2, [r7, #48]	; 0x30
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e3      	bne.n	8004206 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	60fb      	str	r3, [r7, #12]
   return(result);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0310 	bic.w	r3, r3, #16
 8004262:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004270:	61fa      	str	r2, [r7, #28]
 8004272:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	69b9      	ldr	r1, [r7, #24]
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	617b      	str	r3, [r7, #20]
   return(result);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e3      	bne.n	800424c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004288:	4619      	mov	r1, r3
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f83e 	bl	800430c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004290:	e023      	b.n	80042da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d009      	beq.n	80042b2 <HAL_UART_IRQHandler+0x4ea>
 800429e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f95d 	bl	800456a <UART_Transmit_IT>
    return;
 80042b0:	e014      	b.n	80042dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00e      	beq.n	80042dc <HAL_UART_IRQHandler+0x514>
 80042be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f99d 	bl	800460a <UART_EndTransmit_IT>
    return;
 80042d0:	e004      	b.n	80042dc <HAL_UART_IRQHandler+0x514>
    return;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <HAL_UART_IRQHandler+0x514>
      return;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <HAL_UART_IRQHandler+0x514>
      return;
 80042da:	bf00      	nop
  }
}
 80042dc:	37e8      	adds	r7, #232	; 0xe8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop

080042e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b090      	sub	sp, #64	; 0x40
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004334:	e050      	b.n	80043d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d04c      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800433e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <UART_WaitOnFlagUntilTimeout+0x30>
 8004344:	f7fd f8fc 	bl	8001540 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004350:	429a      	cmp	r2, r3
 8004352:	d241      	bcs.n	80043d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004374:	637a      	str	r2, [r7, #52]	; 0x34
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e5      	bne.n	8004354 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3314      	adds	r3, #20
 800438e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	613b      	str	r3, [r7, #16]
   return(result);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043a8:	623a      	str	r2, [r7, #32]
 80043aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	69f9      	ldr	r1, [r7, #28]
 80043ae:	6a3a      	ldr	r2, [r7, #32]
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e00f      	b.n	80043f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d09f      	beq.n	8004336 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3740      	adds	r7, #64	; 0x40
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	88fa      	ldrh	r2, [r7, #6]
 800441e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2222      	movs	r2, #34	; 0x22
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800444c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0220 	orr.w	r2, r2, #32
 800446c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b095      	sub	sp, #84	; 0x54
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	330c      	adds	r3, #12
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800449a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044a4:	643a      	str	r2, [r7, #64]	; 0x40
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e5      	bne.n	8004484 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3314      	adds	r3, #20
 80044be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3314      	adds	r3, #20
 80044d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d119      	bne.n	8004528 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	60bb      	str	r3, [r7, #8]
   return(result);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 0310 	bic.w	r3, r3, #16
 800450a:	647b      	str	r3, [r7, #68]	; 0x44
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004514:	61ba      	str	r2, [r7, #24]
 8004516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6979      	ldr	r1, [r7, #20]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	613b      	str	r3, [r7, #16]
   return(result);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e5      	bne.n	80044f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004536:	bf00      	nop
 8004538:	3754      	adds	r7, #84	; 0x54
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff fecb 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800456a:	b480      	push	{r7}
 800456c:	b085      	sub	sp, #20
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b21      	cmp	r3, #33	; 0x21
 800457c:	d13e      	bne.n	80045fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004586:	d114      	bne.n	80045b2 <UART_Transmit_IT+0x48>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d110      	bne.n	80045b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	621a      	str	r2, [r3, #32]
 80045b0:	e008      	b.n	80045c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	1c59      	adds	r1, r3, #1
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6211      	str	r1, [r2, #32]
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4619      	mov	r1, r3
 80045d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10f      	bne.n	80045f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e000      	b.n	80045fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045fc:	2302      	movs	r3, #2
  }
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004620:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff fe5a 	bl	80042e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b08c      	sub	sp, #48	; 0x30
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b22      	cmp	r3, #34	; 0x22
 800464c:	f040 80ab 	bne.w	80047a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004658:	d117      	bne.n	800468a <UART_Receive_IT+0x50>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d113      	bne.n	800468a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004678:	b29a      	uxth	r2, r3
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
 8004688:	e026      	b.n	80046d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004690:	2300      	movs	r3, #0
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469c:	d007      	beq.n	80046ae <UART_Receive_IT+0x74>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <UART_Receive_IT+0x82>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e008      	b.n	80046ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	4619      	mov	r1, r3
 80046e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d15a      	bne.n	80047a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0220 	bic.w	r2, r2, #32
 80046fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800470a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	2b01      	cmp	r3, #1
 800472a:	d135      	bne.n	8004798 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	613b      	str	r3, [r7, #16]
   return(result);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f023 0310 	bic.w	r3, r3, #16
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	330c      	adds	r3, #12
 8004750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004752:	623a      	str	r2, [r7, #32]
 8004754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	69f9      	ldr	r1, [r7, #28]
 8004758:	6a3a      	ldr	r2, [r7, #32]
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e5      	bne.n	8004732 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b10      	cmp	r3, #16
 8004772:	d10a      	bne.n	800478a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff fdbb 	bl	800430c <HAL_UARTEx_RxEventCallback>
 8004796:	e002      	b.n	800479e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fc fc01 	bl	8000fa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	e002      	b.n	80047a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
  }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3730      	adds	r7, #48	; 0x30
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b4:	b0c0      	sub	sp, #256	; 0x100
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047cc:	68d9      	ldr	r1, [r3, #12]
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	ea40 0301 	orr.w	r3, r0, r1
 80047d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004808:	f021 010c 	bic.w	r1, r1, #12
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004816:	430b      	orrs	r3, r1
 8004818:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482a:	6999      	ldr	r1, [r3, #24]
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	ea40 0301 	orr.w	r3, r0, r1
 8004836:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b8f      	ldr	r3, [pc, #572]	; (8004a7c <UART_SetConfig+0x2cc>)
 8004840:	429a      	cmp	r2, r3
 8004842:	d005      	beq.n	8004850 <UART_SetConfig+0xa0>
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b8d      	ldr	r3, [pc, #564]	; (8004a80 <UART_SetConfig+0x2d0>)
 800484c:	429a      	cmp	r2, r3
 800484e:	d104      	bne.n	800485a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7fd fe82 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8004854:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004858:	e003      	b.n	8004862 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800485a:	f7fd fe69 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 800485e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486c:	f040 810c 	bne.w	8004a88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800487a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800487e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004882:	4622      	mov	r2, r4
 8004884:	462b      	mov	r3, r5
 8004886:	1891      	adds	r1, r2, r2
 8004888:	65b9      	str	r1, [r7, #88]	; 0x58
 800488a:	415b      	adcs	r3, r3
 800488c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800488e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004892:	4621      	mov	r1, r4
 8004894:	eb12 0801 	adds.w	r8, r2, r1
 8004898:	4629      	mov	r1, r5
 800489a:	eb43 0901 	adc.w	r9, r3, r1
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048b2:	4690      	mov	r8, r2
 80048b4:	4699      	mov	r9, r3
 80048b6:	4623      	mov	r3, r4
 80048b8:	eb18 0303 	adds.w	r3, r8, r3
 80048bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048c0:	462b      	mov	r3, r5
 80048c2:	eb49 0303 	adc.w	r3, r9, r3
 80048c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048de:	460b      	mov	r3, r1
 80048e0:	18db      	adds	r3, r3, r3
 80048e2:	653b      	str	r3, [r7, #80]	; 0x50
 80048e4:	4613      	mov	r3, r2
 80048e6:	eb42 0303 	adc.w	r3, r2, r3
 80048ea:	657b      	str	r3, [r7, #84]	; 0x54
 80048ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048f4:	f7fb fcdc 	bl	80002b0 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4b61      	ldr	r3, [pc, #388]	; (8004a84 <UART_SetConfig+0x2d4>)
 80048fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	011c      	lsls	r4, r3, #4
 8004906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004910:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004914:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004918:	4642      	mov	r2, r8
 800491a:	464b      	mov	r3, r9
 800491c:	1891      	adds	r1, r2, r2
 800491e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004920:	415b      	adcs	r3, r3
 8004922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004924:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004928:	4641      	mov	r1, r8
 800492a:	eb12 0a01 	adds.w	sl, r2, r1
 800492e:	4649      	mov	r1, r9
 8004930:	eb43 0b01 	adc.w	fp, r3, r1
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004940:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004948:	4692      	mov	sl, r2
 800494a:	469b      	mov	fp, r3
 800494c:	4643      	mov	r3, r8
 800494e:	eb1a 0303 	adds.w	r3, sl, r3
 8004952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004956:	464b      	mov	r3, r9
 8004958:	eb4b 0303 	adc.w	r3, fp, r3
 800495c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800496c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004970:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004974:	460b      	mov	r3, r1
 8004976:	18db      	adds	r3, r3, r3
 8004978:	643b      	str	r3, [r7, #64]	; 0x40
 800497a:	4613      	mov	r3, r2
 800497c:	eb42 0303 	adc.w	r3, r2, r3
 8004980:	647b      	str	r3, [r7, #68]	; 0x44
 8004982:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004986:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800498a:	f7fb fc91 	bl	80002b0 <__aeabi_uldivmod>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4611      	mov	r1, r2
 8004994:	4b3b      	ldr	r3, [pc, #236]	; (8004a84 <UART_SetConfig+0x2d4>)
 8004996:	fba3 2301 	umull	r2, r3, r3, r1
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2264      	movs	r2, #100	; 0x64
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	1acb      	subs	r3, r1, r3
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <UART_SetConfig+0x2d4>)
 80049ac:	fba3 2302 	umull	r2, r3, r3, r2
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049b8:	441c      	add	r4, r3
 80049ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049cc:	4642      	mov	r2, r8
 80049ce:	464b      	mov	r3, r9
 80049d0:	1891      	adds	r1, r2, r2
 80049d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049d4:	415b      	adcs	r3, r3
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049dc:	4641      	mov	r1, r8
 80049de:	1851      	adds	r1, r2, r1
 80049e0:	6339      	str	r1, [r7, #48]	; 0x30
 80049e2:	4649      	mov	r1, r9
 80049e4:	414b      	adcs	r3, r1
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049f4:	4659      	mov	r1, fp
 80049f6:	00cb      	lsls	r3, r1, #3
 80049f8:	4651      	mov	r1, sl
 80049fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fe:	4651      	mov	r1, sl
 8004a00:	00ca      	lsls	r2, r1, #3
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	4642      	mov	r2, r8
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a10:	464b      	mov	r3, r9
 8004a12:	460a      	mov	r2, r1
 8004a14:	eb42 0303 	adc.w	r3, r2, r3
 8004a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a30:	460b      	mov	r3, r1
 8004a32:	18db      	adds	r3, r3, r3
 8004a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a36:	4613      	mov	r3, r2
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a46:	f7fb fc33 	bl	80002b0 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <UART_SetConfig+0x2d4>)
 8004a50:	fba3 1302 	umull	r1, r3, r3, r2
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	2164      	movs	r1, #100	; 0x64
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	3332      	adds	r3, #50	; 0x32
 8004a62:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <UART_SetConfig+0x2d4>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	f003 0207 	and.w	r2, r3, #7
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4422      	add	r2, r4
 8004a76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a78:	e105      	b.n	8004c86 <UART_SetConfig+0x4d6>
 8004a7a:	bf00      	nop
 8004a7c:	40011000 	.word	0x40011000
 8004a80:	40011400 	.word	0x40011400
 8004a84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a9a:	4642      	mov	r2, r8
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	1891      	adds	r1, r2, r2
 8004aa0:	6239      	str	r1, [r7, #32]
 8004aa2:	415b      	adcs	r3, r3
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aaa:	4641      	mov	r1, r8
 8004aac:	1854      	adds	r4, r2, r1
 8004aae:	4649      	mov	r1, r9
 8004ab0:	eb43 0501 	adc.w	r5, r3, r1
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	00eb      	lsls	r3, r5, #3
 8004abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac2:	00e2      	lsls	r2, r4, #3
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	4643      	mov	r3, r8
 8004aca:	18e3      	adds	r3, r4, r3
 8004acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	eb45 0303 	adc.w	r3, r5, r3
 8004ad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ae6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004af6:	4629      	mov	r1, r5
 8004af8:	008b      	lsls	r3, r1, #2
 8004afa:	4621      	mov	r1, r4
 8004afc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b00:	4621      	mov	r1, r4
 8004b02:	008a      	lsls	r2, r1, #2
 8004b04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b08:	f7fb fbd2 	bl	80002b0 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4b60      	ldr	r3, [pc, #384]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004b12:	fba3 2302 	umull	r2, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	011c      	lsls	r4, r3, #4
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	61b9      	str	r1, [r7, #24]
 8004b34:	415b      	adcs	r3, r3
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	1851      	adds	r1, r2, r1
 8004b40:	6139      	str	r1, [r7, #16]
 8004b42:	4649      	mov	r1, r9
 8004b44:	414b      	adcs	r3, r1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b54:	4659      	mov	r1, fp
 8004b56:	00cb      	lsls	r3, r1, #3
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5e:	4651      	mov	r1, sl
 8004b60:	00ca      	lsls	r2, r1, #3
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	4642      	mov	r2, r8
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b70:	464b      	mov	r3, r9
 8004b72:	460a      	mov	r2, r1
 8004b74:	eb42 0303 	adc.w	r3, r2, r3
 8004b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b94:	4649      	mov	r1, r9
 8004b96:	008b      	lsls	r3, r1, #2
 8004b98:	4641      	mov	r1, r8
 8004b9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b9e:	4641      	mov	r1, r8
 8004ba0:	008a      	lsls	r2, r1, #2
 8004ba2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ba6:	f7fb fb83 	bl	80002b0 <__aeabi_uldivmod>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4b39      	ldr	r3, [pc, #228]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	2164      	movs	r1, #100	; 0x64
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	3332      	adds	r3, #50	; 0x32
 8004bc2:	4a34      	ldr	r2, [pc, #208]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bce:	441c      	add	r4, r3
 8004bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	673b      	str	r3, [r7, #112]	; 0x70
 8004bd8:	677a      	str	r2, [r7, #116]	; 0x74
 8004bda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bde:	4642      	mov	r2, r8
 8004be0:	464b      	mov	r3, r9
 8004be2:	1891      	adds	r1, r2, r2
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	415b      	adcs	r3, r3
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bee:	4641      	mov	r1, r8
 8004bf0:	1851      	adds	r1, r2, r1
 8004bf2:	6039      	str	r1, [r7, #0]
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	414b      	adcs	r3, r1
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c06:	4659      	mov	r1, fp
 8004c08:	00cb      	lsls	r3, r1, #3
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c10:	4651      	mov	r1, sl
 8004c12:	00ca      	lsls	r2, r1, #3
 8004c14:	4610      	mov	r0, r2
 8004c16:	4619      	mov	r1, r3
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4642      	mov	r2, r8
 8004c1c:	189b      	adds	r3, r3, r2
 8004c1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c20:	464b      	mov	r3, r9
 8004c22:	460a      	mov	r2, r1
 8004c24:	eb42 0303 	adc.w	r3, r2, r3
 8004c28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	663b      	str	r3, [r7, #96]	; 0x60
 8004c34:	667a      	str	r2, [r7, #100]	; 0x64
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c42:	4649      	mov	r1, r9
 8004c44:	008b      	lsls	r3, r1, #2
 8004c46:	4641      	mov	r1, r8
 8004c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	008a      	lsls	r2, r1, #2
 8004c50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c54:	f7fb fb2c 	bl	80002b0 <__aeabi_uldivmod>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	2164      	movs	r1, #100	; 0x64
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	3332      	adds	r3, #50	; 0x32
 8004c70:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	f003 020f 	and.w	r2, r3, #15
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4422      	add	r2, r4
 8004c84:	609a      	str	r2, [r3, #8]
}
 8004c86:	bf00      	nop
 8004c88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c92:	bf00      	nop
 8004c94:	51eb851f 	.word	0x51eb851f

08004c98 <__errno>:
 8004c98:	4b01      	ldr	r3, [pc, #4]	; (8004ca0 <__errno+0x8>)
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	200003fc 	.word	0x200003fc

08004ca4 <__libc_init_array>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	4d0d      	ldr	r5, [pc, #52]	; (8004cdc <__libc_init_array+0x38>)
 8004ca8:	4c0d      	ldr	r4, [pc, #52]	; (8004ce0 <__libc_init_array+0x3c>)
 8004caa:	1b64      	subs	r4, r4, r5
 8004cac:	10a4      	asrs	r4, r4, #2
 8004cae:	2600      	movs	r6, #0
 8004cb0:	42a6      	cmp	r6, r4
 8004cb2:	d109      	bne.n	8004cc8 <__libc_init_array+0x24>
 8004cb4:	4d0b      	ldr	r5, [pc, #44]	; (8004ce4 <__libc_init_array+0x40>)
 8004cb6:	4c0c      	ldr	r4, [pc, #48]	; (8004ce8 <__libc_init_array+0x44>)
 8004cb8:	f000 fc8e 	bl	80055d8 <_init>
 8004cbc:	1b64      	subs	r4, r4, r5
 8004cbe:	10a4      	asrs	r4, r4, #2
 8004cc0:	2600      	movs	r6, #0
 8004cc2:	42a6      	cmp	r6, r4
 8004cc4:	d105      	bne.n	8004cd2 <__libc_init_array+0x2e>
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ccc:	4798      	blx	r3
 8004cce:	3601      	adds	r6, #1
 8004cd0:	e7ee      	b.n	8004cb0 <__libc_init_array+0xc>
 8004cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd6:	4798      	blx	r3
 8004cd8:	3601      	adds	r6, #1
 8004cda:	e7f2      	b.n	8004cc2 <__libc_init_array+0x1e>
 8004cdc:	080056fc 	.word	0x080056fc
 8004ce0:	080056fc 	.word	0x080056fc
 8004ce4:	080056fc 	.word	0x080056fc
 8004ce8:	08005700 	.word	0x08005700

08004cec <memset>:
 8004cec:	4402      	add	r2, r0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <memset+0xa>
 8004cf4:	4770      	bx	lr
 8004cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfa:	e7f9      	b.n	8004cf0 <memset+0x4>

08004cfc <siprintf>:
 8004cfc:	b40e      	push	{r1, r2, r3}
 8004cfe:	b500      	push	{lr}
 8004d00:	b09c      	sub	sp, #112	; 0x70
 8004d02:	ab1d      	add	r3, sp, #116	; 0x74
 8004d04:	9002      	str	r0, [sp, #8]
 8004d06:	9006      	str	r0, [sp, #24]
 8004d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d0c:	4809      	ldr	r0, [pc, #36]	; (8004d34 <siprintf+0x38>)
 8004d0e:	9107      	str	r1, [sp, #28]
 8004d10:	9104      	str	r1, [sp, #16]
 8004d12:	4909      	ldr	r1, [pc, #36]	; (8004d38 <siprintf+0x3c>)
 8004d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d18:	9105      	str	r1, [sp, #20]
 8004d1a:	6800      	ldr	r0, [r0, #0]
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	a902      	add	r1, sp, #8
 8004d20:	f000 f868 	bl	8004df4 <_svfiprintf_r>
 8004d24:	9b02      	ldr	r3, [sp, #8]
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	b01c      	add	sp, #112	; 0x70
 8004d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d30:	b003      	add	sp, #12
 8004d32:	4770      	bx	lr
 8004d34:	200003fc 	.word	0x200003fc
 8004d38:	ffff0208 	.word	0xffff0208

08004d3c <__ssputs_r>:
 8004d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d40:	688e      	ldr	r6, [r1, #8]
 8004d42:	429e      	cmp	r6, r3
 8004d44:	4682      	mov	sl, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	4690      	mov	r8, r2
 8004d4a:	461f      	mov	r7, r3
 8004d4c:	d838      	bhi.n	8004dc0 <__ssputs_r+0x84>
 8004d4e:	898a      	ldrh	r2, [r1, #12]
 8004d50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d54:	d032      	beq.n	8004dbc <__ssputs_r+0x80>
 8004d56:	6825      	ldr	r5, [r4, #0]
 8004d58:	6909      	ldr	r1, [r1, #16]
 8004d5a:	eba5 0901 	sub.w	r9, r5, r1
 8004d5e:	6965      	ldr	r5, [r4, #20]
 8004d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d68:	3301      	adds	r3, #1
 8004d6a:	444b      	add	r3, r9
 8004d6c:	106d      	asrs	r5, r5, #1
 8004d6e:	429d      	cmp	r5, r3
 8004d70:	bf38      	it	cc
 8004d72:	461d      	movcc	r5, r3
 8004d74:	0553      	lsls	r3, r2, #21
 8004d76:	d531      	bpl.n	8004ddc <__ssputs_r+0xa0>
 8004d78:	4629      	mov	r1, r5
 8004d7a:	f000 fb63 	bl	8005444 <_malloc_r>
 8004d7e:	4606      	mov	r6, r0
 8004d80:	b950      	cbnz	r0, 8004d98 <__ssputs_r+0x5c>
 8004d82:	230c      	movs	r3, #12
 8004d84:	f8ca 3000 	str.w	r3, [sl]
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d8e:	81a3      	strh	r3, [r4, #12]
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295
 8004d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d98:	6921      	ldr	r1, [r4, #16]
 8004d9a:	464a      	mov	r2, r9
 8004d9c:	f000 fabe 	bl	800531c <memcpy>
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004daa:	81a3      	strh	r3, [r4, #12]
 8004dac:	6126      	str	r6, [r4, #16]
 8004dae:	6165      	str	r5, [r4, #20]
 8004db0:	444e      	add	r6, r9
 8004db2:	eba5 0509 	sub.w	r5, r5, r9
 8004db6:	6026      	str	r6, [r4, #0]
 8004db8:	60a5      	str	r5, [r4, #8]
 8004dba:	463e      	mov	r6, r7
 8004dbc:	42be      	cmp	r6, r7
 8004dbe:	d900      	bls.n	8004dc2 <__ssputs_r+0x86>
 8004dc0:	463e      	mov	r6, r7
 8004dc2:	6820      	ldr	r0, [r4, #0]
 8004dc4:	4632      	mov	r2, r6
 8004dc6:	4641      	mov	r1, r8
 8004dc8:	f000 fab6 	bl	8005338 <memmove>
 8004dcc:	68a3      	ldr	r3, [r4, #8]
 8004dce:	1b9b      	subs	r3, r3, r6
 8004dd0:	60a3      	str	r3, [r4, #8]
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	4433      	add	r3, r6
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	2000      	movs	r0, #0
 8004dda:	e7db      	b.n	8004d94 <__ssputs_r+0x58>
 8004ddc:	462a      	mov	r2, r5
 8004dde:	f000 fba5 	bl	800552c <_realloc_r>
 8004de2:	4606      	mov	r6, r0
 8004de4:	2800      	cmp	r0, #0
 8004de6:	d1e1      	bne.n	8004dac <__ssputs_r+0x70>
 8004de8:	6921      	ldr	r1, [r4, #16]
 8004dea:	4650      	mov	r0, sl
 8004dec:	f000 fabe 	bl	800536c <_free_r>
 8004df0:	e7c7      	b.n	8004d82 <__ssputs_r+0x46>
	...

08004df4 <_svfiprintf_r>:
 8004df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	4698      	mov	r8, r3
 8004dfa:	898b      	ldrh	r3, [r1, #12]
 8004dfc:	061b      	lsls	r3, r3, #24
 8004dfe:	b09d      	sub	sp, #116	; 0x74
 8004e00:	4607      	mov	r7, r0
 8004e02:	460d      	mov	r5, r1
 8004e04:	4614      	mov	r4, r2
 8004e06:	d50e      	bpl.n	8004e26 <_svfiprintf_r+0x32>
 8004e08:	690b      	ldr	r3, [r1, #16]
 8004e0a:	b963      	cbnz	r3, 8004e26 <_svfiprintf_r+0x32>
 8004e0c:	2140      	movs	r1, #64	; 0x40
 8004e0e:	f000 fb19 	bl	8005444 <_malloc_r>
 8004e12:	6028      	str	r0, [r5, #0]
 8004e14:	6128      	str	r0, [r5, #16]
 8004e16:	b920      	cbnz	r0, 8004e22 <_svfiprintf_r+0x2e>
 8004e18:	230c      	movs	r3, #12
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	e0d1      	b.n	8004fc6 <_svfiprintf_r+0x1d2>
 8004e22:	2340      	movs	r3, #64	; 0x40
 8004e24:	616b      	str	r3, [r5, #20]
 8004e26:	2300      	movs	r3, #0
 8004e28:	9309      	str	r3, [sp, #36]	; 0x24
 8004e2a:	2320      	movs	r3, #32
 8004e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e34:	2330      	movs	r3, #48	; 0x30
 8004e36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004fe0 <_svfiprintf_r+0x1ec>
 8004e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e3e:	f04f 0901 	mov.w	r9, #1
 8004e42:	4623      	mov	r3, r4
 8004e44:	469a      	mov	sl, r3
 8004e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e4a:	b10a      	cbz	r2, 8004e50 <_svfiprintf_r+0x5c>
 8004e4c:	2a25      	cmp	r2, #37	; 0x25
 8004e4e:	d1f9      	bne.n	8004e44 <_svfiprintf_r+0x50>
 8004e50:	ebba 0b04 	subs.w	fp, sl, r4
 8004e54:	d00b      	beq.n	8004e6e <_svfiprintf_r+0x7a>
 8004e56:	465b      	mov	r3, fp
 8004e58:	4622      	mov	r2, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f7ff ff6d 	bl	8004d3c <__ssputs_r>
 8004e62:	3001      	adds	r0, #1
 8004e64:	f000 80aa 	beq.w	8004fbc <_svfiprintf_r+0x1c8>
 8004e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e6a:	445a      	add	r2, fp
 8004e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80a2 	beq.w	8004fbc <_svfiprintf_r+0x1c8>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e82:	f10a 0a01 	add.w	sl, sl, #1
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	9307      	str	r3, [sp, #28]
 8004e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e90:	4654      	mov	r4, sl
 8004e92:	2205      	movs	r2, #5
 8004e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e98:	4851      	ldr	r0, [pc, #324]	; (8004fe0 <_svfiprintf_r+0x1ec>)
 8004e9a:	f7fb f9b9 	bl	8000210 <memchr>
 8004e9e:	9a04      	ldr	r2, [sp, #16]
 8004ea0:	b9d8      	cbnz	r0, 8004eda <_svfiprintf_r+0xe6>
 8004ea2:	06d0      	lsls	r0, r2, #27
 8004ea4:	bf44      	itt	mi
 8004ea6:	2320      	movmi	r3, #32
 8004ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eac:	0711      	lsls	r1, r2, #28
 8004eae:	bf44      	itt	mi
 8004eb0:	232b      	movmi	r3, #43	; 0x2b
 8004eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eba:	2b2a      	cmp	r3, #42	; 0x2a
 8004ebc:	d015      	beq.n	8004eea <_svfiprintf_r+0xf6>
 8004ebe:	9a07      	ldr	r2, [sp, #28]
 8004ec0:	4654      	mov	r4, sl
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f04f 0c0a 	mov.w	ip, #10
 8004ec8:	4621      	mov	r1, r4
 8004eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ece:	3b30      	subs	r3, #48	; 0x30
 8004ed0:	2b09      	cmp	r3, #9
 8004ed2:	d94e      	bls.n	8004f72 <_svfiprintf_r+0x17e>
 8004ed4:	b1b0      	cbz	r0, 8004f04 <_svfiprintf_r+0x110>
 8004ed6:	9207      	str	r2, [sp, #28]
 8004ed8:	e014      	b.n	8004f04 <_svfiprintf_r+0x110>
 8004eda:	eba0 0308 	sub.w	r3, r0, r8
 8004ede:	fa09 f303 	lsl.w	r3, r9, r3
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	46a2      	mov	sl, r4
 8004ee8:	e7d2      	b.n	8004e90 <_svfiprintf_r+0x9c>
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	1d19      	adds	r1, r3, #4
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	9103      	str	r1, [sp, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bfbb      	ittet	lt
 8004ef6:	425b      	neglt	r3, r3
 8004ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8004efc:	9307      	strge	r3, [sp, #28]
 8004efe:	9307      	strlt	r3, [sp, #28]
 8004f00:	bfb8      	it	lt
 8004f02:	9204      	strlt	r2, [sp, #16]
 8004f04:	7823      	ldrb	r3, [r4, #0]
 8004f06:	2b2e      	cmp	r3, #46	; 0x2e
 8004f08:	d10c      	bne.n	8004f24 <_svfiprintf_r+0x130>
 8004f0a:	7863      	ldrb	r3, [r4, #1]
 8004f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f0e:	d135      	bne.n	8004f7c <_svfiprintf_r+0x188>
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	1d1a      	adds	r2, r3, #4
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	9203      	str	r2, [sp, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bfb8      	it	lt
 8004f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f20:	3402      	adds	r4, #2
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ff0 <_svfiprintf_r+0x1fc>
 8004f28:	7821      	ldrb	r1, [r4, #0]
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	4650      	mov	r0, sl
 8004f2e:	f7fb f96f 	bl	8000210 <memchr>
 8004f32:	b140      	cbz	r0, 8004f46 <_svfiprintf_r+0x152>
 8004f34:	2340      	movs	r3, #64	; 0x40
 8004f36:	eba0 000a 	sub.w	r0, r0, sl
 8004f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f3e:	9b04      	ldr	r3, [sp, #16]
 8004f40:	4303      	orrs	r3, r0
 8004f42:	3401      	adds	r4, #1
 8004f44:	9304      	str	r3, [sp, #16]
 8004f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f4a:	4826      	ldr	r0, [pc, #152]	; (8004fe4 <_svfiprintf_r+0x1f0>)
 8004f4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f50:	2206      	movs	r2, #6
 8004f52:	f7fb f95d 	bl	8000210 <memchr>
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d038      	beq.n	8004fcc <_svfiprintf_r+0x1d8>
 8004f5a:	4b23      	ldr	r3, [pc, #140]	; (8004fe8 <_svfiprintf_r+0x1f4>)
 8004f5c:	bb1b      	cbnz	r3, 8004fa6 <_svfiprintf_r+0x1b2>
 8004f5e:	9b03      	ldr	r3, [sp, #12]
 8004f60:	3307      	adds	r3, #7
 8004f62:	f023 0307 	bic.w	r3, r3, #7
 8004f66:	3308      	adds	r3, #8
 8004f68:	9303      	str	r3, [sp, #12]
 8004f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f6c:	4433      	add	r3, r6
 8004f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f70:	e767      	b.n	8004e42 <_svfiprintf_r+0x4e>
 8004f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f76:	460c      	mov	r4, r1
 8004f78:	2001      	movs	r0, #1
 8004f7a:	e7a5      	b.n	8004ec8 <_svfiprintf_r+0xd4>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	3401      	adds	r4, #1
 8004f80:	9305      	str	r3, [sp, #20]
 8004f82:	4619      	mov	r1, r3
 8004f84:	f04f 0c0a 	mov.w	ip, #10
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f8e:	3a30      	subs	r2, #48	; 0x30
 8004f90:	2a09      	cmp	r2, #9
 8004f92:	d903      	bls.n	8004f9c <_svfiprintf_r+0x1a8>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0c5      	beq.n	8004f24 <_svfiprintf_r+0x130>
 8004f98:	9105      	str	r1, [sp, #20]
 8004f9a:	e7c3      	b.n	8004f24 <_svfiprintf_r+0x130>
 8004f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e7f0      	b.n	8004f88 <_svfiprintf_r+0x194>
 8004fa6:	ab03      	add	r3, sp, #12
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	462a      	mov	r2, r5
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <_svfiprintf_r+0x1f8>)
 8004fae:	a904      	add	r1, sp, #16
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	f3af 8000 	nop.w
 8004fb6:	1c42      	adds	r2, r0, #1
 8004fb8:	4606      	mov	r6, r0
 8004fba:	d1d6      	bne.n	8004f6a <_svfiprintf_r+0x176>
 8004fbc:	89ab      	ldrh	r3, [r5, #12]
 8004fbe:	065b      	lsls	r3, r3, #25
 8004fc0:	f53f af2c 	bmi.w	8004e1c <_svfiprintf_r+0x28>
 8004fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fc6:	b01d      	add	sp, #116	; 0x74
 8004fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fcc:	ab03      	add	r3, sp, #12
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	462a      	mov	r2, r5
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <_svfiprintf_r+0x1f8>)
 8004fd4:	a904      	add	r1, sp, #16
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f000 f87a 	bl	80050d0 <_printf_i>
 8004fdc:	e7eb      	b.n	8004fb6 <_svfiprintf_r+0x1c2>
 8004fde:	bf00      	nop
 8004fe0:	080056c0 	.word	0x080056c0
 8004fe4:	080056ca 	.word	0x080056ca
 8004fe8:	00000000 	.word	0x00000000
 8004fec:	08004d3d 	.word	0x08004d3d
 8004ff0:	080056c6 	.word	0x080056c6

08004ff4 <_printf_common>:
 8004ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff8:	4616      	mov	r6, r2
 8004ffa:	4699      	mov	r9, r3
 8004ffc:	688a      	ldr	r2, [r1, #8]
 8004ffe:	690b      	ldr	r3, [r1, #16]
 8005000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005004:	4293      	cmp	r3, r2
 8005006:	bfb8      	it	lt
 8005008:	4613      	movlt	r3, r2
 800500a:	6033      	str	r3, [r6, #0]
 800500c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005010:	4607      	mov	r7, r0
 8005012:	460c      	mov	r4, r1
 8005014:	b10a      	cbz	r2, 800501a <_printf_common+0x26>
 8005016:	3301      	adds	r3, #1
 8005018:	6033      	str	r3, [r6, #0]
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	0699      	lsls	r1, r3, #26
 800501e:	bf42      	ittt	mi
 8005020:	6833      	ldrmi	r3, [r6, #0]
 8005022:	3302      	addmi	r3, #2
 8005024:	6033      	strmi	r3, [r6, #0]
 8005026:	6825      	ldr	r5, [r4, #0]
 8005028:	f015 0506 	ands.w	r5, r5, #6
 800502c:	d106      	bne.n	800503c <_printf_common+0x48>
 800502e:	f104 0a19 	add.w	sl, r4, #25
 8005032:	68e3      	ldr	r3, [r4, #12]
 8005034:	6832      	ldr	r2, [r6, #0]
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	42ab      	cmp	r3, r5
 800503a:	dc26      	bgt.n	800508a <_printf_common+0x96>
 800503c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005040:	1e13      	subs	r3, r2, #0
 8005042:	6822      	ldr	r2, [r4, #0]
 8005044:	bf18      	it	ne
 8005046:	2301      	movne	r3, #1
 8005048:	0692      	lsls	r2, r2, #26
 800504a:	d42b      	bmi.n	80050a4 <_printf_common+0xb0>
 800504c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005050:	4649      	mov	r1, r9
 8005052:	4638      	mov	r0, r7
 8005054:	47c0      	blx	r8
 8005056:	3001      	adds	r0, #1
 8005058:	d01e      	beq.n	8005098 <_printf_common+0xa4>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	68e5      	ldr	r5, [r4, #12]
 800505e:	6832      	ldr	r2, [r6, #0]
 8005060:	f003 0306 	and.w	r3, r3, #6
 8005064:	2b04      	cmp	r3, #4
 8005066:	bf08      	it	eq
 8005068:	1aad      	subeq	r5, r5, r2
 800506a:	68a3      	ldr	r3, [r4, #8]
 800506c:	6922      	ldr	r2, [r4, #16]
 800506e:	bf0c      	ite	eq
 8005070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005074:	2500      	movne	r5, #0
 8005076:	4293      	cmp	r3, r2
 8005078:	bfc4      	itt	gt
 800507a:	1a9b      	subgt	r3, r3, r2
 800507c:	18ed      	addgt	r5, r5, r3
 800507e:	2600      	movs	r6, #0
 8005080:	341a      	adds	r4, #26
 8005082:	42b5      	cmp	r5, r6
 8005084:	d11a      	bne.n	80050bc <_printf_common+0xc8>
 8005086:	2000      	movs	r0, #0
 8005088:	e008      	b.n	800509c <_printf_common+0xa8>
 800508a:	2301      	movs	r3, #1
 800508c:	4652      	mov	r2, sl
 800508e:	4649      	mov	r1, r9
 8005090:	4638      	mov	r0, r7
 8005092:	47c0      	blx	r8
 8005094:	3001      	adds	r0, #1
 8005096:	d103      	bne.n	80050a0 <_printf_common+0xac>
 8005098:	f04f 30ff 	mov.w	r0, #4294967295
 800509c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a0:	3501      	adds	r5, #1
 80050a2:	e7c6      	b.n	8005032 <_printf_common+0x3e>
 80050a4:	18e1      	adds	r1, r4, r3
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	2030      	movs	r0, #48	; 0x30
 80050aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050ae:	4422      	add	r2, r4
 80050b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050b8:	3302      	adds	r3, #2
 80050ba:	e7c7      	b.n	800504c <_printf_common+0x58>
 80050bc:	2301      	movs	r3, #1
 80050be:	4622      	mov	r2, r4
 80050c0:	4649      	mov	r1, r9
 80050c2:	4638      	mov	r0, r7
 80050c4:	47c0      	blx	r8
 80050c6:	3001      	adds	r0, #1
 80050c8:	d0e6      	beq.n	8005098 <_printf_common+0xa4>
 80050ca:	3601      	adds	r6, #1
 80050cc:	e7d9      	b.n	8005082 <_printf_common+0x8e>
	...

080050d0 <_printf_i>:
 80050d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050d4:	7e0f      	ldrb	r7, [r1, #24]
 80050d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050d8:	2f78      	cmp	r7, #120	; 0x78
 80050da:	4691      	mov	r9, r2
 80050dc:	4680      	mov	r8, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	469a      	mov	sl, r3
 80050e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050e6:	d807      	bhi.n	80050f8 <_printf_i+0x28>
 80050e8:	2f62      	cmp	r7, #98	; 0x62
 80050ea:	d80a      	bhi.n	8005102 <_printf_i+0x32>
 80050ec:	2f00      	cmp	r7, #0
 80050ee:	f000 80d8 	beq.w	80052a2 <_printf_i+0x1d2>
 80050f2:	2f58      	cmp	r7, #88	; 0x58
 80050f4:	f000 80a3 	beq.w	800523e <_printf_i+0x16e>
 80050f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005100:	e03a      	b.n	8005178 <_printf_i+0xa8>
 8005102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005106:	2b15      	cmp	r3, #21
 8005108:	d8f6      	bhi.n	80050f8 <_printf_i+0x28>
 800510a:	a101      	add	r1, pc, #4	; (adr r1, 8005110 <_printf_i+0x40>)
 800510c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005110:	08005169 	.word	0x08005169
 8005114:	0800517d 	.word	0x0800517d
 8005118:	080050f9 	.word	0x080050f9
 800511c:	080050f9 	.word	0x080050f9
 8005120:	080050f9 	.word	0x080050f9
 8005124:	080050f9 	.word	0x080050f9
 8005128:	0800517d 	.word	0x0800517d
 800512c:	080050f9 	.word	0x080050f9
 8005130:	080050f9 	.word	0x080050f9
 8005134:	080050f9 	.word	0x080050f9
 8005138:	080050f9 	.word	0x080050f9
 800513c:	08005289 	.word	0x08005289
 8005140:	080051ad 	.word	0x080051ad
 8005144:	0800526b 	.word	0x0800526b
 8005148:	080050f9 	.word	0x080050f9
 800514c:	080050f9 	.word	0x080050f9
 8005150:	080052ab 	.word	0x080052ab
 8005154:	080050f9 	.word	0x080050f9
 8005158:	080051ad 	.word	0x080051ad
 800515c:	080050f9 	.word	0x080050f9
 8005160:	080050f9 	.word	0x080050f9
 8005164:	08005273 	.word	0x08005273
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	1d1a      	adds	r2, r3, #4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	602a      	str	r2, [r5, #0]
 8005170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005178:	2301      	movs	r3, #1
 800517a:	e0a3      	b.n	80052c4 <_printf_i+0x1f4>
 800517c:	6820      	ldr	r0, [r4, #0]
 800517e:	6829      	ldr	r1, [r5, #0]
 8005180:	0606      	lsls	r6, r0, #24
 8005182:	f101 0304 	add.w	r3, r1, #4
 8005186:	d50a      	bpl.n	800519e <_printf_i+0xce>
 8005188:	680e      	ldr	r6, [r1, #0]
 800518a:	602b      	str	r3, [r5, #0]
 800518c:	2e00      	cmp	r6, #0
 800518e:	da03      	bge.n	8005198 <_printf_i+0xc8>
 8005190:	232d      	movs	r3, #45	; 0x2d
 8005192:	4276      	negs	r6, r6
 8005194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005198:	485e      	ldr	r0, [pc, #376]	; (8005314 <_printf_i+0x244>)
 800519a:	230a      	movs	r3, #10
 800519c:	e019      	b.n	80051d2 <_printf_i+0x102>
 800519e:	680e      	ldr	r6, [r1, #0]
 80051a0:	602b      	str	r3, [r5, #0]
 80051a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051a6:	bf18      	it	ne
 80051a8:	b236      	sxthne	r6, r6
 80051aa:	e7ef      	b.n	800518c <_printf_i+0xbc>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	6820      	ldr	r0, [r4, #0]
 80051b0:	1d19      	adds	r1, r3, #4
 80051b2:	6029      	str	r1, [r5, #0]
 80051b4:	0601      	lsls	r1, r0, #24
 80051b6:	d501      	bpl.n	80051bc <_printf_i+0xec>
 80051b8:	681e      	ldr	r6, [r3, #0]
 80051ba:	e002      	b.n	80051c2 <_printf_i+0xf2>
 80051bc:	0646      	lsls	r6, r0, #25
 80051be:	d5fb      	bpl.n	80051b8 <_printf_i+0xe8>
 80051c0:	881e      	ldrh	r6, [r3, #0]
 80051c2:	4854      	ldr	r0, [pc, #336]	; (8005314 <_printf_i+0x244>)
 80051c4:	2f6f      	cmp	r7, #111	; 0x6f
 80051c6:	bf0c      	ite	eq
 80051c8:	2308      	moveq	r3, #8
 80051ca:	230a      	movne	r3, #10
 80051cc:	2100      	movs	r1, #0
 80051ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051d2:	6865      	ldr	r5, [r4, #4]
 80051d4:	60a5      	str	r5, [r4, #8]
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	bfa2      	ittt	ge
 80051da:	6821      	ldrge	r1, [r4, #0]
 80051dc:	f021 0104 	bicge.w	r1, r1, #4
 80051e0:	6021      	strge	r1, [r4, #0]
 80051e2:	b90e      	cbnz	r6, 80051e8 <_printf_i+0x118>
 80051e4:	2d00      	cmp	r5, #0
 80051e6:	d04d      	beq.n	8005284 <_printf_i+0x1b4>
 80051e8:	4615      	mov	r5, r2
 80051ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80051ee:	fb03 6711 	mls	r7, r3, r1, r6
 80051f2:	5dc7      	ldrb	r7, [r0, r7]
 80051f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051f8:	4637      	mov	r7, r6
 80051fa:	42bb      	cmp	r3, r7
 80051fc:	460e      	mov	r6, r1
 80051fe:	d9f4      	bls.n	80051ea <_printf_i+0x11a>
 8005200:	2b08      	cmp	r3, #8
 8005202:	d10b      	bne.n	800521c <_printf_i+0x14c>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	07de      	lsls	r6, r3, #31
 8005208:	d508      	bpl.n	800521c <_printf_i+0x14c>
 800520a:	6923      	ldr	r3, [r4, #16]
 800520c:	6861      	ldr	r1, [r4, #4]
 800520e:	4299      	cmp	r1, r3
 8005210:	bfde      	ittt	le
 8005212:	2330      	movle	r3, #48	; 0x30
 8005214:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005218:	f105 35ff 	addle.w	r5, r5, #4294967295
 800521c:	1b52      	subs	r2, r2, r5
 800521e:	6122      	str	r2, [r4, #16]
 8005220:	f8cd a000 	str.w	sl, [sp]
 8005224:	464b      	mov	r3, r9
 8005226:	aa03      	add	r2, sp, #12
 8005228:	4621      	mov	r1, r4
 800522a:	4640      	mov	r0, r8
 800522c:	f7ff fee2 	bl	8004ff4 <_printf_common>
 8005230:	3001      	adds	r0, #1
 8005232:	d14c      	bne.n	80052ce <_printf_i+0x1fe>
 8005234:	f04f 30ff 	mov.w	r0, #4294967295
 8005238:	b004      	add	sp, #16
 800523a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523e:	4835      	ldr	r0, [pc, #212]	; (8005314 <_printf_i+0x244>)
 8005240:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005244:	6829      	ldr	r1, [r5, #0]
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	f851 6b04 	ldr.w	r6, [r1], #4
 800524c:	6029      	str	r1, [r5, #0]
 800524e:	061d      	lsls	r5, r3, #24
 8005250:	d514      	bpl.n	800527c <_printf_i+0x1ac>
 8005252:	07df      	lsls	r7, r3, #31
 8005254:	bf44      	itt	mi
 8005256:	f043 0320 	orrmi.w	r3, r3, #32
 800525a:	6023      	strmi	r3, [r4, #0]
 800525c:	b91e      	cbnz	r6, 8005266 <_printf_i+0x196>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	f023 0320 	bic.w	r3, r3, #32
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	2310      	movs	r3, #16
 8005268:	e7b0      	b.n	80051cc <_printf_i+0xfc>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	f043 0320 	orr.w	r3, r3, #32
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	2378      	movs	r3, #120	; 0x78
 8005274:	4828      	ldr	r0, [pc, #160]	; (8005318 <_printf_i+0x248>)
 8005276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800527a:	e7e3      	b.n	8005244 <_printf_i+0x174>
 800527c:	0659      	lsls	r1, r3, #25
 800527e:	bf48      	it	mi
 8005280:	b2b6      	uxthmi	r6, r6
 8005282:	e7e6      	b.n	8005252 <_printf_i+0x182>
 8005284:	4615      	mov	r5, r2
 8005286:	e7bb      	b.n	8005200 <_printf_i+0x130>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	6826      	ldr	r6, [r4, #0]
 800528c:	6961      	ldr	r1, [r4, #20]
 800528e:	1d18      	adds	r0, r3, #4
 8005290:	6028      	str	r0, [r5, #0]
 8005292:	0635      	lsls	r5, r6, #24
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	d501      	bpl.n	800529c <_printf_i+0x1cc>
 8005298:	6019      	str	r1, [r3, #0]
 800529a:	e002      	b.n	80052a2 <_printf_i+0x1d2>
 800529c:	0670      	lsls	r0, r6, #25
 800529e:	d5fb      	bpl.n	8005298 <_printf_i+0x1c8>
 80052a0:	8019      	strh	r1, [r3, #0]
 80052a2:	2300      	movs	r3, #0
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	4615      	mov	r5, r2
 80052a8:	e7ba      	b.n	8005220 <_printf_i+0x150>
 80052aa:	682b      	ldr	r3, [r5, #0]
 80052ac:	1d1a      	adds	r2, r3, #4
 80052ae:	602a      	str	r2, [r5, #0]
 80052b0:	681d      	ldr	r5, [r3, #0]
 80052b2:	6862      	ldr	r2, [r4, #4]
 80052b4:	2100      	movs	r1, #0
 80052b6:	4628      	mov	r0, r5
 80052b8:	f7fa ffaa 	bl	8000210 <memchr>
 80052bc:	b108      	cbz	r0, 80052c2 <_printf_i+0x1f2>
 80052be:	1b40      	subs	r0, r0, r5
 80052c0:	6060      	str	r0, [r4, #4]
 80052c2:	6863      	ldr	r3, [r4, #4]
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	2300      	movs	r3, #0
 80052c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052cc:	e7a8      	b.n	8005220 <_printf_i+0x150>
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	462a      	mov	r2, r5
 80052d2:	4649      	mov	r1, r9
 80052d4:	4640      	mov	r0, r8
 80052d6:	47d0      	blx	sl
 80052d8:	3001      	adds	r0, #1
 80052da:	d0ab      	beq.n	8005234 <_printf_i+0x164>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	079b      	lsls	r3, r3, #30
 80052e0:	d413      	bmi.n	800530a <_printf_i+0x23a>
 80052e2:	68e0      	ldr	r0, [r4, #12]
 80052e4:	9b03      	ldr	r3, [sp, #12]
 80052e6:	4298      	cmp	r0, r3
 80052e8:	bfb8      	it	lt
 80052ea:	4618      	movlt	r0, r3
 80052ec:	e7a4      	b.n	8005238 <_printf_i+0x168>
 80052ee:	2301      	movs	r3, #1
 80052f0:	4632      	mov	r2, r6
 80052f2:	4649      	mov	r1, r9
 80052f4:	4640      	mov	r0, r8
 80052f6:	47d0      	blx	sl
 80052f8:	3001      	adds	r0, #1
 80052fa:	d09b      	beq.n	8005234 <_printf_i+0x164>
 80052fc:	3501      	adds	r5, #1
 80052fe:	68e3      	ldr	r3, [r4, #12]
 8005300:	9903      	ldr	r1, [sp, #12]
 8005302:	1a5b      	subs	r3, r3, r1
 8005304:	42ab      	cmp	r3, r5
 8005306:	dcf2      	bgt.n	80052ee <_printf_i+0x21e>
 8005308:	e7eb      	b.n	80052e2 <_printf_i+0x212>
 800530a:	2500      	movs	r5, #0
 800530c:	f104 0619 	add.w	r6, r4, #25
 8005310:	e7f5      	b.n	80052fe <_printf_i+0x22e>
 8005312:	bf00      	nop
 8005314:	080056d1 	.word	0x080056d1
 8005318:	080056e2 	.word	0x080056e2

0800531c <memcpy>:
 800531c:	440a      	add	r2, r1
 800531e:	4291      	cmp	r1, r2
 8005320:	f100 33ff 	add.w	r3, r0, #4294967295
 8005324:	d100      	bne.n	8005328 <memcpy+0xc>
 8005326:	4770      	bx	lr
 8005328:	b510      	push	{r4, lr}
 800532a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800532e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005332:	4291      	cmp	r1, r2
 8005334:	d1f9      	bne.n	800532a <memcpy+0xe>
 8005336:	bd10      	pop	{r4, pc}

08005338 <memmove>:
 8005338:	4288      	cmp	r0, r1
 800533a:	b510      	push	{r4, lr}
 800533c:	eb01 0402 	add.w	r4, r1, r2
 8005340:	d902      	bls.n	8005348 <memmove+0x10>
 8005342:	4284      	cmp	r4, r0
 8005344:	4623      	mov	r3, r4
 8005346:	d807      	bhi.n	8005358 <memmove+0x20>
 8005348:	1e43      	subs	r3, r0, #1
 800534a:	42a1      	cmp	r1, r4
 800534c:	d008      	beq.n	8005360 <memmove+0x28>
 800534e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005356:	e7f8      	b.n	800534a <memmove+0x12>
 8005358:	4402      	add	r2, r0
 800535a:	4601      	mov	r1, r0
 800535c:	428a      	cmp	r2, r1
 800535e:	d100      	bne.n	8005362 <memmove+0x2a>
 8005360:	bd10      	pop	{r4, pc}
 8005362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800536a:	e7f7      	b.n	800535c <memmove+0x24>

0800536c <_free_r>:
 800536c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800536e:	2900      	cmp	r1, #0
 8005370:	d044      	beq.n	80053fc <_free_r+0x90>
 8005372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005376:	9001      	str	r0, [sp, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f1a1 0404 	sub.w	r4, r1, #4
 800537e:	bfb8      	it	lt
 8005380:	18e4      	addlt	r4, r4, r3
 8005382:	f000 f913 	bl	80055ac <__malloc_lock>
 8005386:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <_free_r+0x94>)
 8005388:	9801      	ldr	r0, [sp, #4]
 800538a:	6813      	ldr	r3, [r2, #0]
 800538c:	b933      	cbnz	r3, 800539c <_free_r+0x30>
 800538e:	6063      	str	r3, [r4, #4]
 8005390:	6014      	str	r4, [r2, #0]
 8005392:	b003      	add	sp, #12
 8005394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005398:	f000 b90e 	b.w	80055b8 <__malloc_unlock>
 800539c:	42a3      	cmp	r3, r4
 800539e:	d908      	bls.n	80053b2 <_free_r+0x46>
 80053a0:	6825      	ldr	r5, [r4, #0]
 80053a2:	1961      	adds	r1, r4, r5
 80053a4:	428b      	cmp	r3, r1
 80053a6:	bf01      	itttt	eq
 80053a8:	6819      	ldreq	r1, [r3, #0]
 80053aa:	685b      	ldreq	r3, [r3, #4]
 80053ac:	1949      	addeq	r1, r1, r5
 80053ae:	6021      	streq	r1, [r4, #0]
 80053b0:	e7ed      	b.n	800538e <_free_r+0x22>
 80053b2:	461a      	mov	r2, r3
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	b10b      	cbz	r3, 80053bc <_free_r+0x50>
 80053b8:	42a3      	cmp	r3, r4
 80053ba:	d9fa      	bls.n	80053b2 <_free_r+0x46>
 80053bc:	6811      	ldr	r1, [r2, #0]
 80053be:	1855      	adds	r5, r2, r1
 80053c0:	42a5      	cmp	r5, r4
 80053c2:	d10b      	bne.n	80053dc <_free_r+0x70>
 80053c4:	6824      	ldr	r4, [r4, #0]
 80053c6:	4421      	add	r1, r4
 80053c8:	1854      	adds	r4, r2, r1
 80053ca:	42a3      	cmp	r3, r4
 80053cc:	6011      	str	r1, [r2, #0]
 80053ce:	d1e0      	bne.n	8005392 <_free_r+0x26>
 80053d0:	681c      	ldr	r4, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	6053      	str	r3, [r2, #4]
 80053d6:	4421      	add	r1, r4
 80053d8:	6011      	str	r1, [r2, #0]
 80053da:	e7da      	b.n	8005392 <_free_r+0x26>
 80053dc:	d902      	bls.n	80053e4 <_free_r+0x78>
 80053de:	230c      	movs	r3, #12
 80053e0:	6003      	str	r3, [r0, #0]
 80053e2:	e7d6      	b.n	8005392 <_free_r+0x26>
 80053e4:	6825      	ldr	r5, [r4, #0]
 80053e6:	1961      	adds	r1, r4, r5
 80053e8:	428b      	cmp	r3, r1
 80053ea:	bf04      	itt	eq
 80053ec:	6819      	ldreq	r1, [r3, #0]
 80053ee:	685b      	ldreq	r3, [r3, #4]
 80053f0:	6063      	str	r3, [r4, #4]
 80053f2:	bf04      	itt	eq
 80053f4:	1949      	addeq	r1, r1, r5
 80053f6:	6021      	streq	r1, [r4, #0]
 80053f8:	6054      	str	r4, [r2, #4]
 80053fa:	e7ca      	b.n	8005392 <_free_r+0x26>
 80053fc:	b003      	add	sp, #12
 80053fe:	bd30      	pop	{r4, r5, pc}
 8005400:	200005e4 	.word	0x200005e4

08005404 <sbrk_aligned>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	4e0e      	ldr	r6, [pc, #56]	; (8005440 <sbrk_aligned+0x3c>)
 8005408:	460c      	mov	r4, r1
 800540a:	6831      	ldr	r1, [r6, #0]
 800540c:	4605      	mov	r5, r0
 800540e:	b911      	cbnz	r1, 8005416 <sbrk_aligned+0x12>
 8005410:	f000 f8bc 	bl	800558c <_sbrk_r>
 8005414:	6030      	str	r0, [r6, #0]
 8005416:	4621      	mov	r1, r4
 8005418:	4628      	mov	r0, r5
 800541a:	f000 f8b7 	bl	800558c <_sbrk_r>
 800541e:	1c43      	adds	r3, r0, #1
 8005420:	d00a      	beq.n	8005438 <sbrk_aligned+0x34>
 8005422:	1cc4      	adds	r4, r0, #3
 8005424:	f024 0403 	bic.w	r4, r4, #3
 8005428:	42a0      	cmp	r0, r4
 800542a:	d007      	beq.n	800543c <sbrk_aligned+0x38>
 800542c:	1a21      	subs	r1, r4, r0
 800542e:	4628      	mov	r0, r5
 8005430:	f000 f8ac 	bl	800558c <_sbrk_r>
 8005434:	3001      	adds	r0, #1
 8005436:	d101      	bne.n	800543c <sbrk_aligned+0x38>
 8005438:	f04f 34ff 	mov.w	r4, #4294967295
 800543c:	4620      	mov	r0, r4
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	200005e8 	.word	0x200005e8

08005444 <_malloc_r>:
 8005444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005448:	1ccd      	adds	r5, r1, #3
 800544a:	f025 0503 	bic.w	r5, r5, #3
 800544e:	3508      	adds	r5, #8
 8005450:	2d0c      	cmp	r5, #12
 8005452:	bf38      	it	cc
 8005454:	250c      	movcc	r5, #12
 8005456:	2d00      	cmp	r5, #0
 8005458:	4607      	mov	r7, r0
 800545a:	db01      	blt.n	8005460 <_malloc_r+0x1c>
 800545c:	42a9      	cmp	r1, r5
 800545e:	d905      	bls.n	800546c <_malloc_r+0x28>
 8005460:	230c      	movs	r3, #12
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	2600      	movs	r6, #0
 8005466:	4630      	mov	r0, r6
 8005468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800546c:	4e2e      	ldr	r6, [pc, #184]	; (8005528 <_malloc_r+0xe4>)
 800546e:	f000 f89d 	bl	80055ac <__malloc_lock>
 8005472:	6833      	ldr	r3, [r6, #0]
 8005474:	461c      	mov	r4, r3
 8005476:	bb34      	cbnz	r4, 80054c6 <_malloc_r+0x82>
 8005478:	4629      	mov	r1, r5
 800547a:	4638      	mov	r0, r7
 800547c:	f7ff ffc2 	bl	8005404 <sbrk_aligned>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	4604      	mov	r4, r0
 8005484:	d14d      	bne.n	8005522 <_malloc_r+0xde>
 8005486:	6834      	ldr	r4, [r6, #0]
 8005488:	4626      	mov	r6, r4
 800548a:	2e00      	cmp	r6, #0
 800548c:	d140      	bne.n	8005510 <_malloc_r+0xcc>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	4631      	mov	r1, r6
 8005492:	4638      	mov	r0, r7
 8005494:	eb04 0803 	add.w	r8, r4, r3
 8005498:	f000 f878 	bl	800558c <_sbrk_r>
 800549c:	4580      	cmp	r8, r0
 800549e:	d13a      	bne.n	8005516 <_malloc_r+0xd2>
 80054a0:	6821      	ldr	r1, [r4, #0]
 80054a2:	3503      	adds	r5, #3
 80054a4:	1a6d      	subs	r5, r5, r1
 80054a6:	f025 0503 	bic.w	r5, r5, #3
 80054aa:	3508      	adds	r5, #8
 80054ac:	2d0c      	cmp	r5, #12
 80054ae:	bf38      	it	cc
 80054b0:	250c      	movcc	r5, #12
 80054b2:	4629      	mov	r1, r5
 80054b4:	4638      	mov	r0, r7
 80054b6:	f7ff ffa5 	bl	8005404 <sbrk_aligned>
 80054ba:	3001      	adds	r0, #1
 80054bc:	d02b      	beq.n	8005516 <_malloc_r+0xd2>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	442b      	add	r3, r5
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	e00e      	b.n	80054e4 <_malloc_r+0xa0>
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	1b52      	subs	r2, r2, r5
 80054ca:	d41e      	bmi.n	800550a <_malloc_r+0xc6>
 80054cc:	2a0b      	cmp	r2, #11
 80054ce:	d916      	bls.n	80054fe <_malloc_r+0xba>
 80054d0:	1961      	adds	r1, r4, r5
 80054d2:	42a3      	cmp	r3, r4
 80054d4:	6025      	str	r5, [r4, #0]
 80054d6:	bf18      	it	ne
 80054d8:	6059      	strne	r1, [r3, #4]
 80054da:	6863      	ldr	r3, [r4, #4]
 80054dc:	bf08      	it	eq
 80054de:	6031      	streq	r1, [r6, #0]
 80054e0:	5162      	str	r2, [r4, r5]
 80054e2:	604b      	str	r3, [r1, #4]
 80054e4:	4638      	mov	r0, r7
 80054e6:	f104 060b 	add.w	r6, r4, #11
 80054ea:	f000 f865 	bl	80055b8 <__malloc_unlock>
 80054ee:	f026 0607 	bic.w	r6, r6, #7
 80054f2:	1d23      	adds	r3, r4, #4
 80054f4:	1af2      	subs	r2, r6, r3
 80054f6:	d0b6      	beq.n	8005466 <_malloc_r+0x22>
 80054f8:	1b9b      	subs	r3, r3, r6
 80054fa:	50a3      	str	r3, [r4, r2]
 80054fc:	e7b3      	b.n	8005466 <_malloc_r+0x22>
 80054fe:	6862      	ldr	r2, [r4, #4]
 8005500:	42a3      	cmp	r3, r4
 8005502:	bf0c      	ite	eq
 8005504:	6032      	streq	r2, [r6, #0]
 8005506:	605a      	strne	r2, [r3, #4]
 8005508:	e7ec      	b.n	80054e4 <_malloc_r+0xa0>
 800550a:	4623      	mov	r3, r4
 800550c:	6864      	ldr	r4, [r4, #4]
 800550e:	e7b2      	b.n	8005476 <_malloc_r+0x32>
 8005510:	4634      	mov	r4, r6
 8005512:	6876      	ldr	r6, [r6, #4]
 8005514:	e7b9      	b.n	800548a <_malloc_r+0x46>
 8005516:	230c      	movs	r3, #12
 8005518:	603b      	str	r3, [r7, #0]
 800551a:	4638      	mov	r0, r7
 800551c:	f000 f84c 	bl	80055b8 <__malloc_unlock>
 8005520:	e7a1      	b.n	8005466 <_malloc_r+0x22>
 8005522:	6025      	str	r5, [r4, #0]
 8005524:	e7de      	b.n	80054e4 <_malloc_r+0xa0>
 8005526:	bf00      	nop
 8005528:	200005e4 	.word	0x200005e4

0800552c <_realloc_r>:
 800552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005530:	4680      	mov	r8, r0
 8005532:	4614      	mov	r4, r2
 8005534:	460e      	mov	r6, r1
 8005536:	b921      	cbnz	r1, 8005542 <_realloc_r+0x16>
 8005538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800553c:	4611      	mov	r1, r2
 800553e:	f7ff bf81 	b.w	8005444 <_malloc_r>
 8005542:	b92a      	cbnz	r2, 8005550 <_realloc_r+0x24>
 8005544:	f7ff ff12 	bl	800536c <_free_r>
 8005548:	4625      	mov	r5, r4
 800554a:	4628      	mov	r0, r5
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005550:	f000 f838 	bl	80055c4 <_malloc_usable_size_r>
 8005554:	4284      	cmp	r4, r0
 8005556:	4607      	mov	r7, r0
 8005558:	d802      	bhi.n	8005560 <_realloc_r+0x34>
 800555a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800555e:	d812      	bhi.n	8005586 <_realloc_r+0x5a>
 8005560:	4621      	mov	r1, r4
 8005562:	4640      	mov	r0, r8
 8005564:	f7ff ff6e 	bl	8005444 <_malloc_r>
 8005568:	4605      	mov	r5, r0
 800556a:	2800      	cmp	r0, #0
 800556c:	d0ed      	beq.n	800554a <_realloc_r+0x1e>
 800556e:	42bc      	cmp	r4, r7
 8005570:	4622      	mov	r2, r4
 8005572:	4631      	mov	r1, r6
 8005574:	bf28      	it	cs
 8005576:	463a      	movcs	r2, r7
 8005578:	f7ff fed0 	bl	800531c <memcpy>
 800557c:	4631      	mov	r1, r6
 800557e:	4640      	mov	r0, r8
 8005580:	f7ff fef4 	bl	800536c <_free_r>
 8005584:	e7e1      	b.n	800554a <_realloc_r+0x1e>
 8005586:	4635      	mov	r5, r6
 8005588:	e7df      	b.n	800554a <_realloc_r+0x1e>
	...

0800558c <_sbrk_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4d06      	ldr	r5, [pc, #24]	; (80055a8 <_sbrk_r+0x1c>)
 8005590:	2300      	movs	r3, #0
 8005592:	4604      	mov	r4, r0
 8005594:	4608      	mov	r0, r1
 8005596:	602b      	str	r3, [r5, #0]
 8005598:	f7fb fefa 	bl	8001390 <_sbrk>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_sbrk_r+0x1a>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_sbrk_r+0x1a>
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	200005ec 	.word	0x200005ec

080055ac <__malloc_lock>:
 80055ac:	4801      	ldr	r0, [pc, #4]	; (80055b4 <__malloc_lock+0x8>)
 80055ae:	f000 b811 	b.w	80055d4 <__retarget_lock_acquire_recursive>
 80055b2:	bf00      	nop
 80055b4:	200005f0 	.word	0x200005f0

080055b8 <__malloc_unlock>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__malloc_unlock+0x8>)
 80055ba:	f000 b80c 	b.w	80055d6 <__retarget_lock_release_recursive>
 80055be:	bf00      	nop
 80055c0:	200005f0 	.word	0x200005f0

080055c4 <_malloc_usable_size_r>:
 80055c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055c8:	1f18      	subs	r0, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bfbc      	itt	lt
 80055ce:	580b      	ldrlt	r3, [r1, r0]
 80055d0:	18c0      	addlt	r0, r0, r3
 80055d2:	4770      	bx	lr

080055d4 <__retarget_lock_acquire_recursive>:
 80055d4:	4770      	bx	lr

080055d6 <__retarget_lock_release_recursive>:
 80055d6:	4770      	bx	lr

080055d8 <_init>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr

080055e4 <_fini>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr
